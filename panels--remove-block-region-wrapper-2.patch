From 094a707cbc588bdc8340158b4bc5a7d268c0e117 Mon Sep 17 00:00:00 2001
From: Jakob Perry <japerry@45640.no-reply.drupal.org>
Date: Fri, 7 Apr 2017 16:40:54 -0700
Subject: [PATCH] Remove depricated d7 code from 8.x version of panels.

---
 help/api.html                                      |  44 --
 help/panels.help.ini                               |  74 ---
 help/plugins-layout.html                           |  87 ---
 i18n_panels/README.txt                             |  93 ----
 i18n_panels/i18n_panels.i18n.inc                   |  50 --
 i18n_panels/i18n_panels.info                       |   8 -
 i18n_panels/i18n_panels.install                    |  27 -
 i18n_panels/i18n_panels.module                     | 443 ---------------
 includes/common.inc                                | 612 ---------------------
 includes/display-edit.inc                          | 329 -----------
 includes/display-layout.inc                        | 331 -----------
 includes/page-wizard.inc                           |  84 ---
 includes/panels.pipelines.inc                      |  33 --
 includes/plugins.inc                               | 506 -----------------
 panels_mini/panels_mini.info                       |   6 -
 panels_mini/panels_mini.install                    | 128 -----
 panels_mini/panels_mini.module                     | 518 -----------------
 .../plugins/content_types/icon_panels_mini.png     | Bin 450 -> 0 bytes
 panels_mini/plugins/content_types/panels_mini.inc  | 175 ------
 panels_mini/plugins/export_ui/panels_mini.inc      |  44 --
 .../plugins/export_ui/panels_mini_ui.class.php     | 307 -----------
 plugins/style_bases/pane/pane_plain_box/icon.png   | Bin 3022 -> 0 bytes
 .../pane/pane_plain_box/pane-plain-box.css         |  10 -
 .../pane/pane_plain_box/pane-plain-box.tpl.php     |  16 -
 .../pane/pane_plain_box/pane_plain_box.inc         |  93 ----
 .../pane/pane_rounded_shadow/box-color.png         | Bin 4772 -> 0 bytes
 .../pane/pane_rounded_shadow/box-shadow.png        | Bin 2528 -> 0 bytes
 .../style_bases/pane/pane_rounded_shadow/icon.png  | Bin 3566 -> 0 bytes
 .../pane_rounded_shadow/pane-rounded-shadow.css    | 110 ----
 .../pane-rounded-shadow.tpl.php                    |  31 --
 .../pane_rounded_shadow/pane_rounded_shadow.inc    |  99 ----
 .../style_bases/region/region_plain_box/icon.png   | Bin 3022 -> 0 bytes
 .../region/region_plain_box/region-plain-box.css   |   6 -
 .../region_plain_box/region-plain-box.tpl.php      |  28 -
 .../region/region_plain_box/region_plain_box.inc   |  65 ---
 .../region/region_rounded_shadow/box-color.png     | Bin 4772 -> 0 bytes
 .../region/region_rounded_shadow/box-shadow.png    | Bin 2528 -> 0 bytes
 .../region/region_rounded_shadow/icon.png          | Bin 3566 -> 0 bytes
 .../region-rounded-shadow.css                      | 101 ----
 .../region-rounded-shadow.tpl.php                  |  28 -
 .../region_rounded_shadow.inc                      |  71 ---
 plugins/styles/block.inc                           |  58 --
 plugins/styles/corners/corner-bits.png             | Bin 514 -> 0 bytes
 .../corners/panels-rounded-corners-box.tpl.php     |  20 -
 plugins/styles/corners/rounded_corners.inc         | 205 -------
 plugins/styles/corners/shadow-b.png                | Bin 140 -> 0 bytes
 plugins/styles/corners/shadow-l.png                | Bin 137 -> 0 bytes
 plugins/styles/corners/shadow-r.png                | Bin 137 -> 0 bytes
 plugins/styles/corners/shadow-t.png                | Bin 139 -> 0 bytes
 plugins/styles/default.inc                         |  26 -
 plugins/styles/list.inc                            |  57 --
 plugins/styles/naked.inc                           |  33 --
 plugins/styles/stylizer.inc                        | 375 -------------
 53 files changed, 5331 deletions(-)
 delete mode 100644 help/api.html
 delete mode 100644 help/panels.help.ini
 delete mode 100644 help/plugins-layout.html
 delete mode 100644 i18n_panels/README.txt
 delete mode 100644 i18n_panels/i18n_panels.i18n.inc
 delete mode 100644 i18n_panels/i18n_panels.info
 delete mode 100644 i18n_panels/i18n_panels.install
 delete mode 100644 i18n_panels/i18n_panels.module
 delete mode 100644 includes/common.inc
 delete mode 100644 includes/display-edit.inc
 delete mode 100644 includes/display-layout.inc
 delete mode 100644 includes/page-wizard.inc
 delete mode 100644 includes/panels.pipelines.inc
 delete mode 100644 includes/plugins.inc
 delete mode 100644 panels_mini/panels_mini.info
 delete mode 100644 panels_mini/panels_mini.install
 delete mode 100644 panels_mini/panels_mini.module
 delete mode 100644 panels_mini/plugins/content_types/icon_panels_mini.png
 delete mode 100644 panels_mini/plugins/content_types/panels_mini.inc
 delete mode 100644 panels_mini/plugins/export_ui/panels_mini.inc
 delete mode 100644 panels_mini/plugins/export_ui/panels_mini_ui.class.php
 delete mode 100644 plugins/style_bases/pane/pane_plain_box/icon.png
 delete mode 100644 plugins/style_bases/pane/pane_plain_box/pane-plain-box.css
 delete mode 100644 plugins/style_bases/pane/pane_plain_box/pane-plain-box.tpl.php
 delete mode 100644 plugins/style_bases/pane/pane_plain_box/pane_plain_box.inc
 delete mode 100644 plugins/style_bases/pane/pane_rounded_shadow/box-color.png
 delete mode 100644 plugins/style_bases/pane/pane_rounded_shadow/box-shadow.png
 delete mode 100644 plugins/style_bases/pane/pane_rounded_shadow/icon.png
 delete mode 100644 plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.css
 delete mode 100644 plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.tpl.php
 delete mode 100644 plugins/style_bases/pane/pane_rounded_shadow/pane_rounded_shadow.inc
 delete mode 100644 plugins/style_bases/region/region_plain_box/icon.png
 delete mode 100644 plugins/style_bases/region/region_plain_box/region-plain-box.css
 delete mode 100644 plugins/style_bases/region/region_plain_box/region-plain-box.tpl.php
 delete mode 100644 plugins/style_bases/region/region_plain_box/region_plain_box.inc
 delete mode 100644 plugins/style_bases/region/region_rounded_shadow/box-color.png
 delete mode 100644 plugins/style_bases/region/region_rounded_shadow/box-shadow.png
 delete mode 100644 plugins/style_bases/region/region_rounded_shadow/icon.png
 delete mode 100644 plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.css
 delete mode 100644 plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.tpl.php
 delete mode 100644 plugins/style_bases/region/region_rounded_shadow/region_rounded_shadow.inc
 delete mode 100644 plugins/styles/block.inc
 delete mode 100644 plugins/styles/corners/corner-bits.png
 delete mode 100644 plugins/styles/corners/panels-rounded-corners-box.tpl.php
 delete mode 100644 plugins/styles/corners/rounded_corners.inc
 delete mode 100644 plugins/styles/corners/shadow-b.png
 delete mode 100644 plugins/styles/corners/shadow-l.png
 delete mode 100644 plugins/styles/corners/shadow-r.png
 delete mode 100644 plugins/styles/corners/shadow-t.png
 delete mode 100644 plugins/styles/default.inc
 delete mode 100644 plugins/styles/list.inc
 delete mode 100644 plugins/styles/naked.inc
 delete mode 100644 plugins/styles/stylizer.inc

diff --git a/help/api.html b/help/api.html
deleted file mode 100644
index e0d2d4a..0000000
--- a/help/api.html
+++ /dev/null
@@ -1,44 +0,0 @@
-<p>Panels is a pluggable rendering engine. Apart from its datastructure, almost nothing in Panels is hardcoded; every level of its rendering process is controlled by plugins (of the <a href="topic:ctools/plugins">CTools</a> variety), and therefore can be overriden. Some of these plugins' behaviors are obvious from the UI, whereas others are much more under-the-hood.</p>
-<p>Most site builders and module authors will find that plugins are the only way they need to interact with Panels to do what they want. However, if you are building whole new UIs/applications that are to be driven by the Panels engine, you'll also need the more traditional API that manages Panels editing and CRUD. Panels Node and Mini Panels are examples of 'applications' in this sense, as is <a href="http://drupal.org/project/og_panels">OG Panels</a>.</p>
-<p>This page is divided into two sections, the first dealing with Panels' rendering system & the plugins the drive it, and the second with the requirements for creating a Panels-driven application/UI. The former is a good starting place and should be of interest to anyone wanting to begin working with the Panels API.</p>
-
-<h2>The Panels Rendering System</h2>
-<p>Panels' rendering system takes a fully-loaded panels_display object and turns it into HTML. It doesn't care how that object was built or where it comes from - it's just a rendering engine. So long as the calling code provides a well-formed panels_display object, the engine will spit out HTML. Exactly how that process works is determined entirely by plugins.</p>
-<p>Panels utilizes eight different types of plugins within its rendering system, four owned by Panels and four by CTools. Let's run through that list.</p>
-<dl>
-<dt><a href="topic:panels/plugins-layout">Layout plugins</a></dt>
-<dd><em>Owned by Panels.</em></dd>
-<dd>Layout plugins provide the HTML output skeleton for any panel: they define a set of regions and (optionally) accompanying CSS/JS, very analogous to how themes define block regions. While layout plugins with complex logic are possible (the Flexible layout, for example), most layouts are nothing more than a region list, a tpl.php skeleton, and some CSS.</dd>
-<dt><a href="topic:panels/plugins-style">Style plugins</a></dt>
-<dd><em>Owned by Panels.</em></dd>
-<dd>Style plugins control the markup that wraps both individual panes and whole panel regions. A basic style plugin need not provide more than some basic CSS and a theme function or tpl.php file.</dd>
-<dt><a href="topic:ctools/plugins-style-bases">Style Bases</a></dt>
-<dd><em>Owned by CTools.</em></dd>
-<dd>Panels implements the 'style_bases' plugin type in order to interact with the Stylizer system, which technically lives in CTools, though true 'ownership' is a little blurred. Regardless, Panels uses this plugin to interact with Stylaizer in order to allow the creation of style plugins in the UI.</dd>
-<dd>This plugin is probably of interest only to module developers; site builders can safely skip it.</dd>
-<dt><a href="topic:ctools/context-context">Context plugins</a></dt>
-<dd><em>Owned by CTools.</em></dd>
-<dd>Context plugins are abstracted wrappers around bits of data - a node, user, or taxonomy term are easy examples. Panels uses context plugins so that it can work with all these different bits of data without caring about the details of the datastructure itself. Context can be a confusing concept, and you can learn more in the <a href="topic:ctools/context">CTools help</a>.</dd>
-<dd>Note that <a href="topic:ctools/context-arguments">argument</a> and <a href="topic:ctools/context-relationships">relationship</a> plugins are technically also used by Panels, but because they're really means for creating more context, they don't get separate entries in this list.</dd>
-<dt><a href="topic:ctools/plugins-content">Content Type plugins</a></dt>
-<dd><em>Owned by CTools: can utilize context.</em></dd>
-<dd>At the heart of the Panels rendering process, content type plugins define the rendering logic for every pane. Offering Panels a renderable chunk from your module means defining one of these. For those accustomed to the block system, they can be thought of as a more verbose block definition, contained neatly inside a single plugin.</dd>
-<dd>Content type plugins rely on context to provide them with source data, when necessary; this makes content plugins nice and portable.</dd>
-<dt><a href="topic:ctools/context-access">Access plugins</a></dt>
-<dd><em>Owned by CTools: can utilize context.</em></dd>
-<dd>Access plugins are essentially portable access checking logic, responsible for answering "Yes" or "No" given some contextual data. Panels uses these to define 'visibility rules' on individual panes. The other place these are commonly seen is in defining 'Selection rules' on Page Manager variants.</dd>
-<dd>If your module introduces new permissioning concepts or access logic (NOT a basic hook_perm() implementation), you may want to consider also encapsulating that logic in one or more of these plugins. For example, Organic Groups might implement an access plugin to allow/deny based on group membership, or the Date module might implement allow/deny logic based on request time.</dd>
-<dt><a href="topic:panels/plugins-cache">Cache plugins</a></dt>
-<dd><em>Owned by Panels; should utilize context.</em></dd>
-<dd>Panels cache plugins define caching strategies that can be applied to individual panes, or to whole displays. Caching plugins must deal with two basic issues: the cache backend to use for reading/writing, and TTL-managing strategies.</dd>
-<dd>TTL strategies can (and should) integrate heavily with the context, as that is where the real differential benefit of Panels-based caching is vs. standard core caching.</dd>
-<dt><a href="topic:panels/plugins-renderers">Display Renderers</a></dt>
-<dd><em>Owned by Panels: utilizes everything else.</em></dd>
-<dd>In the simplest terms, display renderers take a fully-loaded panels_display object and render it. They are very complex, powerful plugins - one could use them to cause Panels to bypass every single other plugin in this list. Fortunately, there is virtually no circumstance under which one would need to implement these plugins in the process of building a single site; only contrib developers working on highly complex use cases are likely to ever need them.</dd>
-<dd>In short, each display renderer plugin <strong>is</strong> a self-contained Panels rendering engine. If you want to grok the Panels rendering system, study these.</dd>
-</dl>
-
-
-<h2>Panels-based Applications</h2>
-<p>At its core, Panels is a rendering engine with no UI (though it does provide common elements for reuse in admin UIs). So if you're working with Panels via the web UI, it means you're working with a Panels application. The three that ship with this version of Panels are Mini Panels, Panel Nodes, and the integration with CTools' Page Manager.</p>
-<p>Panels also implements a task_handler plugin, which is owned by Page Manager in CTools. Task handlers aren't strictly a part of Panels' rendering system itself though (strictly speaking, they wrap it), so we won't cover them here.</p>
\ No newline at end of file
diff --git a/help/panels.help.ini b/help/panels.help.ini
deleted file mode 100644
index 570afc7..0000000
--- a/help/panels.help.ini
+++ /dev/null
@@ -1,74 +0,0 @@
-[advanced help settings]
-line break = TRUE
-
-[glossary]
-title = Panels glossary of terms
-weight = 100
-
-[about]
-title = About Panels
-weight = -100
-
-[common-tasks]
-title = Accomplishing common tasks in Panels
-weight = -50
-
-[tutorials]
-title = Panels tutorials and how-tos
-weight = -30
-
-[tutorial-landing]
-title = Creating a simple landing page
-parent = tutorials
-
-[tutorial-node]
-title = Styling a node page
-parent = tutorials
-
-[tutorial-vocabulary]
-title = Styling a vocabulary
-parent = tutorials
-
-[apps]
-title = Panels-based applications
-parent = api
-
-[panels-pages]
-title = Panel pages, via Page Manager
-parent = apps
-
-[panels-mini]
-title = Mini panels
-parent = apps
-
-[panels-node]
-title = Panel nodes
-parent = apps
-
-[api]
-title = Working with the Panels API
-weight = 50
-
-[render-api]
-title = Panels plugins
-parent = api
-
-[plugins-layout]
-title = Layout plugins
-parent = render-api
-weight = -10
-
-[plugins-style]
-title = Style plugins
-parent = render-api
-weight = -7
-
-[plugins-cache]
-title = Cache plugins
-parent = render-api
-weight = -4
-
-[plugins-renderers]
-title = Display Renderer plugins
-parent = render-api
-weight = -1
diff --git a/help/plugins-layout.html b/help/plugins-layout.html
deleted file mode 100644
index 592baed..0000000
--- a/help/plugins-layout.html
+++ /dev/null
@@ -1,87 +0,0 @@
-<h2>Getting Started:</h2>
-<p>Layout plugins are one of the simplest and most powerful sections of the Panels API. There are two different ways that a layout can be implemented via Panels. Panels supports both module and theme implementations of Panels. The module implementation requires that hook_ctools_plugin_directory define the directory in which your layout plugins exist. (This same hook defines the directory for all Panels plugins) Alternately, if you intend on implementing a layout in a theme this can be done primary through the theme's info file. The CTools help does a great job of actually explaining this portion of the API <a href="topic:ctools/plugins-implementing">ctools: plugins</a>.</p>
-
-<p>For purposes of this example, our module name is going to be "layout_sample" and our plugin will be "first_layout".</p>
-
-<h2>Directory Structure:</h2>
-<p>We're going to assume that you've laid your directory structure out very similarly to how panels does it. Something like this is rather likely:
-<pre>layout_sample
-  layout_sample.info
-  layout_sample.module
-  plugins
-    layouts
-      first_layout
-        first_layout.css
-        first_layout.inc
-        first_layout.png
-        layout-sample-first-layout.tpl.php</pre>
-The name of our .inc file is going to be the key to the entire layout plugin.</p>
-
-<h2>The .module File:</h2>
-<p>First, declare where your custom layouts reside by implementing the CTools hook <code>hook_ctools_plugin_directory()</code>:
-<pre>
-/**
- * Implements hook_ctools_plugin_directory().
- */
-function layout_sample_ctools_plugin_directory($module, $plugin) {
-  if ($module == 'panels' && $plugin == 'layouts') {
-    return 'plugins/layouts';
-  }
-}
-</pre>
-
-<h2>The .inc File:</h2>
-<p>We will start with the first_layout.inc file as it's the most important file we're dealing with here. First_layout.inc will look similar to the following:
-<pre>
-  $plugin = array(
-    'title' => t('First Layout'),
-    'icon' => 'first_layout.png',
-    'theme' => 'layout_sample_first_layout',
-    'css' => 'first_layout.css',
-    'panels' => array(
-      'main' => t('Main region'),
-      'right' => t('Right region'),
-    ),
-  );
-</pre>
-The include file defines all the other files that our layout will utilize in order to be truly useful. The array is fairly self explanitory but for the sake of specificity:
-<ol>
-<li><strong>Title:</strong><br />The title of our layout. (Utilized within the panels administration screens)</li>
-<li><strong>Icon:</strong><br />The graphical representation of our layout. (Utilized within the panels administration screens)</li>
-<li><strong>Theme:</strong><br />The template file of our layout. (Sharp eyed readers will note that the theme definition utilizes underscores instead of dashes, and does not have ".tpl.php" after it. This is refering to the layout-sample-first-layout.tpl.php file all the same, it is simply how the naming convention works. Utilize dashes in the tpl file name and underscores when refering to it in your include file.)</li>
-<li><strong>CSS:</strong><br />The css file to be utilized for our layout. (Utilized within the panels administration screens, AND when viewing the actual panel itself.)</li>
-<li><strong>Panels:</strong><br />Defines all the various regions within your panel. This will be further utilized within our tpl.php file.</li>
-</ol>
-There are many additional properties that can be added to the include file. For purposes of this document we'll also make mention of the 'admin css' property. 'Admin css' is especially useful when utilizing a fixed width layout with fixed with panel regions. This can break under most administrative circumstances, and panels provides you with the ability to give an additional css layout for the administrative section. It's a simple nicety and looks like this:
-<pre>
-  $plugin = array(
-    'title' => t('First Layout'),
-    'icon' => 'first_layout.png',
-    'theme' => 'layout_sample_first_layout',
-    'css' => 'first_layout.css',
-    'admin css' => 'first_layout_admin.css',
-    'panels' => array(
-      'main' => t('Main region'),
-      'right' => t('Right region'),
-    ),
-  );
-</pre>
-</p>
-
-<h2>The tpl.php File:</h2>
-<p>The tpl.php file is very similar to any other template file within drupal. The difference here is that we're being passed an array of regions through $content, and we also have a css id available to us for the entire panel in the form of $css_id. The template is very straight forward and will look similar to the following:
-<pre>&lt;div class="panel-display panel-stacked-twothirds-onethird clearfix" &lt;?php if (!empty($css_id)) { print "id=\"$css_id\""; } ?&gt;&gt;
-  &lt;div class="panel-panel panel-col-first panel-region-main"&gt;
-    &lt;div class="inside"&gt;&lt;?php print $content['main']; ?&gt;&lt;/div&gt;
-  &lt;/div&gt;
-
-  &lt;div class="panel-panel panel-col-last panel-region-right"&gt;
-    &lt;div class="inside"&gt;&lt;?php print $content['right']; ?&gt;&lt;/div&gt;
-  &lt;/div&gt;
-&lt;/div&gt;
-</pre>
-This is simply an example of what the html could look like. You can alter an update this html to fit your own needs.
-</p>
-
-<h2>The Other Files:</h2>
-<p>The css and png files are as simple as any other css or png file you've ever utilized. Panels provides some images for its graphical representations of its layouts. I would heavily encourage you to modify these to suit your needs. The CSS files (admin and non) will be included at the appropriate times. Simply set them up to fit your purposes. If you're utilizing fixed width panel regions it's probably smart to provide an admin css file as well with your panel layout.</p>
diff --git a/i18n_panels/README.txt b/i18n_panels/README.txt
deleted file mode 100644
index 71c4b8f..0000000
--- a/i18n_panels/README.txt
+++ /dev/null
@@ -1,93 +0,0 @@
-
-This module provides by default the ability to translate panel display and
-panel pane titles.
-Further it introduced an extension to the ctools content_types plugin.
-You can now define translatable settings which will be registered in i18n.
-Out of the box the module extends the custom content content_type to allow
-translation of the content.
-
-Requirements:
-   Ctools 7.x-1.x-dev (Jan 28-2014 or newer)
-   Panels 7.x-3.x-dev (Jan 28-2014 or newer)
-
-Plugin definition extension:
-------------------------------
-
-This example shows how the content_type custom is extended:
-
-#### Default: ####
-/**
- * Plugins are described by creating a $plugin array which will be used
- * by the system that includes this file.
- */
-$plugin = array(
-  'title' => t('Custom content'),
-  'no title override' => TRUE,
-  'defaults' => array('admin_title' => '', 'title' => '', 'body' => '', 'format' => filter_fallback_format(), 'substitute' => TRUE),
-  'js' => array('misc/autocomplete.js', 'misc/textarea.js', 'misc/collapse.js'),
-  // Make sure the edit form is only used for some subtypes.
-  'edit form' => '',
-  'add form' => '',
-  'edit text' => t('Edit'),
-  'all contexts' => TRUE,
-);
-
-#### Extended Configuration: ####
-/**
- * Plugins are described by creating a $plugin array which will be used
- * by the system that includes this file.
- */
-$plugin = array(
-  'title' => t('Custom content'),
-  'no title override' => TRUE,
-  'defaults' => array('admin_title' => '', 'title' => '', 'body' => '', 'format' => filter_fallback_format(), 'substitute' => TRUE),
-  'js' => array('misc/autocomplete.js', 'misc/textarea.js', 'misc/collapse.js'),
-  // Make sure the edit form is only used for some subtypes.
-  'edit form' => '',
-  'add form' => '',
-  'edit text' => t('Edit'),
-  'all contexts' => TRUE,
-  'i18n_settings' = array(
-    'title',
-    'body' => array('format' => 'plain_text'),
-    'items|0|title'
-  ),
-);
-
-The new key "i18n_settings" defines an array with the settings that are
-translatable. The array contains the names of the settings, they have to be
-available in the "defaults" array of the content definition. If you need to
-define a format use the name of the setting as the array item key and as item
-another array with the detail configuration. E.g
-'i18n_settings' = array('body' => array('format' => 'plain_text'))
-
-If i18n_settings is a string it's used as callback. The expected return is an
-array equal to the one used in the fix configuration.
-You can even declare nested settings  as translatable, to do so use '|' as
-delimiter.
-E.g. 'items|0|title' is evaluated as $settings['items'][0]['title']
-
-#### Callback: ####
-/**
- * Plugins are described by creating a $plugin array which will be used
- * by the system that includes this file.
- */
-$plugin = array(
-  'title' => t('Custom content'),
-  'no title override' => TRUE,
-  'defaults' => array('admin_title' => '', 'title' => '', 'body' => '', 'format' => filter_fallback_format(), 'substitute' => TRUE),
-  'js' => array('misc/autocomplete.js', 'misc/textarea.js', 'misc/collapse.js'),
-  // Make sure the edit form is only used for some subtypes.
-  'edit form' => '',
-  'add form' => '',
-  'edit text' => t('Edit'),
-  'all contexts' => TRUE,
-  'i18n_settings' => 'ctools_custom_content_type_i18n_settings',
-);
-
-function ctools_custom_content_type_i18n_settings($conf) {
-  return array(
-    'title',
-    'body' => array('format' => $conf['format']),
-  );
-}
diff --git a/i18n_panels/i18n_panels.i18n.inc b/i18n_panels/i18n_panels.i18n.inc
deleted file mode 100644
index d1478e3..0000000
--- a/i18n_panels/i18n_panels.i18n.inc
+++ /dev/null
@@ -1,50 +0,0 @@
-<?php
-/**
- * @file
- * Internationalization (i18n) hooks.
- */
-
-/**
- * Implements hook_i18n_object_info().
- */
-function i18n_panels_i18n_object_info() {
-  $info['pane_configuration'] = array(
-    'title' => t('Pane Configuration'),
-    'key' => 'uuid',
-    'string translation' => array(
-      'textgroup' => 'panels',
-      'type' => 'pane_configuration',
-      'properties' => array(
-        'title' => t('Pane Title'),
-      ),
-    ),
-  );
-  $info['display_configuration'] = array(
-    'title' => t('Display Configuration'),
-    'key' => 'uuid',
-    'string translation' => array(
-      'textgroup' => 'panels',
-      'type' => 'display_configuration',
-      'properties' => array(
-        'title' => t('Display Title'),
-      ),
-    ),
-  );
-
-  return $info;
-}
-
-/**
- * Implements hook_i18n_string_info().
- */
-function i18n_panels_i18n_string_info() {
-  $groups['panels'] = array(
-    'title' => t('Panels'),
-    'description' => t('Translatable panels items: display and pane configuration items. E.g. Title.'),
-    // This group doesn't have strings with format.
-    'format' => FALSE,
-    // This group can list all strings.
-    'list' => FALSE,
-  );
-  return $groups;
-}
diff --git a/i18n_panels/i18n_panels.info b/i18n_panels/i18n_panels.info
deleted file mode 100644
index f5adc03..0000000
--- a/i18n_panels/i18n_panels.info
+++ /dev/null
@@ -1,8 +0,0 @@
-name = Panels translation
-description = Supports translatable panels items.
-dependencies[] = i18n
-dependencies[] = panels
-dependencies[] = i18n_string
-dependencies[] = i18n_translation
-package = Multilingual - Internationalization
-core = 7.x
diff --git a/i18n_panels/i18n_panels.install b/i18n_panels/i18n_panels.install
deleted file mode 100644
index ff7631b..0000000
--- a/i18n_panels/i18n_panels.install
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * @file
- * Internationalization (i18n) submodule: Panels translation.
- */
-
-/**
- * Implements hook_requirements().
- */
-function i18n_panels_requirements($phase) {
-  $requirements = array();
-  // Check only for status report, to allow update / install.
-  if ($phase == 'runtime') {
-    // Check if the panels module runs with uuids.
-    $requirements['uuid'] = array(
-      'title' => t('Panels uuid support.'),
-      'severity' => REQUIREMENT_OK,
-      'value' => t('Available'),
-    );
-    if (!db_field_exists('panels_pane', 'uuid')) {
-      $requirements['uuid']['severity'] = REQUIREMENT_ERROR;
-      $requirements['uuid']['value'] = t('Not found. Please apply the provided patches and run the update script.');
-    }
-  }
-  return $requirements;
-}
diff --git a/i18n_panels/i18n_panels.module b/i18n_panels/i18n_panels.module
deleted file mode 100644
index eb2ca3a..0000000
--- a/i18n_panels/i18n_panels.module
+++ /dev/null
@@ -1,443 +0,0 @@
-<?php
-
-/**
- * @file
- * Internationalization (i18n) submodule: Panels translation.
- */
-
-/**
- * Fetch the i18n_settings of the content type if there are any.
- *
- * @param object $pane
- *   The pane to deal with.
- *
- * @return array|false
- *   Settings or FALSE if none are present.
- */
-function i18n_panels_get_i18n_settings($pane) {
-  ctools_include('content');
-  $content_type = ctools_get_content_type($pane->type);
-  if (isset($content_type['i18n_settings'])) {
-    if (is_string($content_type['i18n_settings']) && function_exists($content_type['i18n_settings'])) {
-      $content_type['i18n_settings'] = $content_type['i18n_settings']($pane->configuration);
-    }
-  }
-  // Provide the override title string as translation for all panes that have
-  // this setting enabled.
-  if (isset($pane->configuration['override_title']) && $pane->configuration['override_title']) {
-    if (isset($content_type['i18n_settings']) && is_array($content_type['i18n_settings'])) {
-      $content_type['i18n_settings'][] = 'override_title_text';
-    }
-    else {
-      $content_type['i18n_settings'] = array('override_title_text');
-    }
-  }
-  return isset($content_type['i18n_settings']) ? $content_type['i18n_settings'] : FALSE;
-}
-
-/**
- * Returns the translation object of the pane.
- *
- * @param object $pane
- *   The pane to deal with.
- *
- * @return stdClass|FALSE
- *   Returns FALSE if no translation is necessary.
- */
-function i18n_panels_get_i18n_translation_object($pane) {
-  $translation_object = array();
-
-  // Handle content type specific i18n settings.
-  if ($i18n_settings = i18n_panels_get_i18n_settings($pane)) {
-    // Register translatable settings.
-    foreach ($i18n_settings as $i18n_setting => $settings) {
-      if (!is_array($settings)) {
-        $i18n_setting = $settings;
-        $settings = array('format' => 'plain_text');
-      }
-      $translation_object[$i18n_setting] = NULL;
-      $key_exists = FALSE;
-      // Ensure a nested setting is "unpacked".
-      $config_value = drupal_array_get_nested_value($pane->configuration, explode('|', $i18n_setting), $key_exists);
-      // If we reached the end of the nested setting use the value as source.
-      if ($key_exists) {
-        $translation_object[$i18n_setting] = array(
-          'string' => $config_value,
-          'format' => $settings['format'],
-        );
-        $translation_object['panels_i18n_settings'][$i18n_setting] = $settings;
-      }
-    }
-  }
-
-  // Check if this pane has a custom title enabled.
-  if (!empty($pane->configuration['override_title'])) {
-    $translation_object['title']['string'] = $pane->configuration['override_title_text'];
-  }
-  if (!empty($translation_object)) {
-    return (object) $translation_object;
-  }
-  return FALSE;
-}
-
-/**
- * Implements hook_panels_pane_insert().
- *
- * @param object $pane
- *   The pane to deal with.
- */
-function i18n_panels_panels_pane_insert($pane) {
-  i18n_panels_panels_pane_update($pane);
-}
-
-/**
- * Implements hook_panels_pane_update().
- *
- * @param object $pane
- *   The pane to deal with.
- */
-function i18n_panels_panels_pane_update($pane) {
-  if ($translation_object = i18n_panels_get_i18n_translation_object($pane)) {
-    $translation_object->uuid = $pane->uuid;
-    $status = i18n_string_object_update('pane_configuration', $translation_object);
-  }
-}
-
-/**
- * Implements hook_panels_pane_delete().
- *
- * @param array $pids
- *   Array with the panel ids to delete.
- */
-function i18n_panels_panels_pane_delete($pids) {
-  if (!empty($pids)) {
-    // Fetch the uuids from the db.
-    $uuids = db_select('panels_pane')
-      ->fields('panels_pane', array('uuid'))
-      ->condition('pid', $pids)
-      ->execute()
-      ->fetchCol();
-    foreach ($uuids as $uuid) {
-      // Create dummy pane with uuid as property.
-      $pane = (object) array('uuid' => $uuid);
-      i18n_string_object_remove('pane_configuration', $pane);
-    }
-  }
-}
-
-/**
- * Implements hook_panels_pane_prerender().
- *
- * @param object $pane
- *   The pane to deal with.
- */
-function i18n_panels_panels_pane_prerender($pane) {
-  // Check if this pane has translations.
-  if (isset($pane->uuid) && $translation_object = i18n_panels_get_i18n_translation_object($pane)) {
-    $translation_object->uuid = $pane->uuid;
-    // Send to translation.
-    $translation_object = i18n_string_object_translate('pane_configuration', $translation_object);
-    unset($translation_object->uuid, $translation_object->i18n_settings);
-    foreach ($translation_object as $i18n_setting => $translated_setting) {
-      if ($i18n_setting != 'panels_i18n_settings') {
-        if (is_array($translated_setting)) {
-          $translated_setting = $translated_setting['string'];
-        }
-        drupal_array_set_nested_value($pane->configuration, explode('|', $i18n_setting), $translated_setting);
-      }
-    }
-  }
-}
-
-/**
- * Implements hook_panels_display_save().
- *
- * @param panels_display $display
- *   The display to deal with.
- */
-function i18n_panels_panels_display_save($display) {
-  $status = i18n_string_object_update('display_configuration', $display);
-}
-
-/**
- * Implements hook_panels_display_delete().
- *
- * @param int $did
- *   Id of the display to delete.
- */
-function i18n_panels_panels_delete_display($did) {
-  // Fetch uuid to delete the translations.
-  $uuid = db_select('panels_display')
-    ->fields('panels_display', array('uuid'))
-    ->condition('did', $did)
-    ->execute()
-    ->fetchColumn();
-  // Build a dummy display.
-  $display = (object) array('uuid' => $uuid);
-
-  // Check if this display was just saved in the db.
-  if (!_18n_panels_is_exported_panels_display($display)) {
-    // If the display was just saved in the db remove all translations.
-    i18n_string_object_remove('display_configuration', $display);
-    // Remove related pane translations too.
-    $pids = db_select('panels_pane')
-      ->fields('panels_pane', array('pid'))
-      ->condition('did', $did)
-      ->execute()
-      ->fetchCol();
-    i18n_panels_panels_pane_delete($pids);
-  }
-  else {
-    // If the display is exported leave the translated strings but give the user
-    // a hint how to clean up.
-    drupal_set_message(
-      t(
-        'The reverted panels display(s) were exported, please run a <a href="!link">string refresh</a> to update the translatable strings.',
-        array('!link' => url('admin/config/regional/translate/i18n_string'))
-      ),
-      'warning',
-      FALSE
-    );
-  }
-}
-
-/**
- * Implements hook_panels_pre_render().
- *
- * This function must not rely on the passed $renderer parameter. The parameter
- * could be empty because this function is reused in i18n_ctools_render_alter().
- *
- * @todo Check if a drupal_alter() in panels_display::get_title() is applicable.
- *
- * @see i18n_ctools_render_alter()
- *
- * @param panels_display $display
- *   The display to deal with.
- * @param panels_renderer_standard $renderer
- *   The renderer to deal with.
- */
-function i18n_panels_panels_pre_render(&$display, $renderer) {
-  // Avoid double translations.
-  if (!isset($display->i18n_panels_title_translated)) {
-    $translation = i18n_string_object_translate('display_configuration', $display);
-    if (is_array($translation->title)) {
-      $display->title = $translation->title['string'];
-    }
-    else {
-      $display->title = $translation->title;
-    }
-    $display->i18n_panels_title_translated = TRUE;
-  }
-}
-
-/**
- * Implements hook_ctools_render_alter().
- *
- * Under some circumstances the title of the panel page is set before
- * hook_panels_pre_render() is fired. Such cases can be handled with this hook.
- *
- * @todo Check if a drupal_alter() in panels_display::get_title() is applicable.
- */
-function i18n_ctools_render_alter(&$info, $page, $context) {
-  // @todo Find a better way to detect a panels page.
-  if ($page === TRUE && !empty($info['content']['#display']) && $info['content']['#display'] instanceof panels_display) {
-    i18n_panels_panels_pre_render($info['content']['#display'], NULL);
-    // Set the info title. This is used to set the page title.
-    $info['title'] = $info['content']['#display']->get_title();
-  }
-}
-
-
-/**
- * Implements hook_ctools_plugin_post_alter().
- *
- * Register some translatable configuration settings for plugins.
- */
-function i18n_panels_ctools_plugin_post_alter(&$plugin, $plugin_type_info) {
-  if ($plugin_type_info['type'] == 'content_types') {
-    // Modify custom content.
-    if ($plugin['name'] == 'custom') {
-      // Register callback to get the translatable settings.
-      $plugin['i18n_settings'] = 'ctools_custom_content_type_i18n_settings';
-    }
-  }
-}
-
-/**
- * Callback to provide the translatable settings appropriate to the config.
- *
- * @param array $conf
- *   Content type configuration.
- *
- * @return array
- *   i18n_settings configuration.
- */
-function ctools_custom_content_type_i18n_settings($conf) {
-  return array(
-    'title',
-    'body' => array('format' => $conf['format']),
-  );
-}
-
-/**
- * Implements hook_i18n_string_list_TEXTGROUP_alter().
- *
- * Necessary to support the dynamic translatable settings defined by ctools
- * content types.
- */
-function i18n_panels_i18n_string_list_panels_alter(&$strings, $type = NULL, $object = NULL) {
-  if (isset($object->panels_i18n_settings)) {
-    foreach ($object->panels_i18n_settings as $i18n_setting => $settings) {
-      if (isset($object->{$i18n_setting})) {
-        $strings['panels'][$type][$object->uuid][$i18n_setting] = $object->{$i18n_setting};
-      }
-    }
-  }
-}
-
-/**
- * Implements hook_i18n_string_list().
- *
- * @todo Figure out a generic solution to fetch exported displays.
- */
-function i18n_panels_i18n_string_list($group) {
-  $strings = array();
-  if ($group == 'panels') {
-
-    // Fetch all available displays.
-    $displays = _18n_panels_fetch_all_panel_displays();
-
-    foreach ($displays as $display) {
-      if (empty($display->uuid)) {
-        drupal_set_message(t('The display %display has no uuid, please resave or re-export it.', array('%display' => $display->did)), 'warning');
-        continue;
-      }
-      // Avoid duplicated runs _18n_panels_fetch_all_panel_displays() probably
-      // returns the same display twice, one for the db based and one for the
-      // exported one.
-      if (isset($strings['panels']['display_configuration'][$display->uuid])) {
-        continue;
-      }
-      $strings['panels']['display_configuration'][$display->uuid]['title']['string'] = $display->title;
-      foreach ($display->content as $pane) {
-        if (empty($pane->uuid)) {
-          // Fetch exported uuid and validate it.
-          $uuid = str_replace('new-', '', $pane->pid);
-          if (!panels_uuid_is_valid($uuid)) {
-            drupal_set_message(t('The pane %pane has no uuid, please resave or re-export it.', array('%pane' => $pane->pid)), 'warning');
-            continue;
-          }
-          $pane->uuid = $uuid;
-        }
-        if ($translation_object = i18n_panels_get_i18n_translation_object($pane)) {
-          // Split up all strings and add them to the list.
-          $pane_strings = (array) $translation_object;
-          unset($pane_strings['panels_i18n_settings']);
-          foreach ($pane_strings as $key => $pane_string) {
-            $strings['panels']['pane_configuration'][$pane->uuid][$key] = $pane_string;
-          }
-        }
-      }
-    }
-  }
-  return $strings;
-}
-
-/**
- * Checks if the give display is exported or only stored in the db.
- *
- * @return boolean
- *   TRUE if the display is available from code.
- */
-function _18n_panels_is_exported_panels_display($display) {
-  if (isset($display->uuid)) {
-    $displays = _18n_panels_fetch_all_panel_displays();
-    return isset($displays['exported-' . $display->uuid]);
-  }
-  return FALSE;
-}
-
-/**
- * Returns a list of really all available panel displays.
- *
- * The list is statically cached. Use the parameter $reset to refresh the list
- * during the same request.
- * Probably returns the same display twice - once with the db based and once
- * the exported one.
- *
- * @todo I bet there are better ways to solve this mess.
- *
- * @param bool $reset
- *   Reset the static cache.
- *
- * @return array
- *   List of all panel displays.
- */
-function _18n_panels_fetch_all_panel_displays($reset = FALSE) {
-  $displays = &drupal_static(__FUNCTION__, array());
-  if (!empty($displays) && !$reset) {
-    return $displays;
-  }
-
-  // Fetch db based displays.
-  $dids = db_select('panels_display')->fields('panels_display', array('did'))->execute()->fetchCol();
-  $displays = panels_load_displays($dids);
-
-  // Fetch exported displays.
-  ctools_include('export');
-  foreach (ctools_export_crud_load_all('panels_display') as $panels_display) {
-    if (!empty($panels_display->uuid)) {
-      $displays['exported-' . $panels_display->uuid] = $panels_display;
-    }
-  }
-
-  // Fetch mini panels.
-  $mini_panels = ctools_export_crud_load_all('panels_mini');
-  foreach ($mini_panels as $pane) {
-    if (!empty($pane->display->uuid)) {
-      $displays['exported-' . $pane->display->uuid] = $pane->display;
-    }
-  }
-
-  // Fetch in page manager embedded displays.
-  if (module_exists('page_manager')) {
-    module_load_include('inc', 'page_manager', 'page_manager.admin');
-    $tasks = page_manager_get_tasks_by_type('page');
-    $pages = array('operations' => array(), 'tasks' => array());
-    page_manager_get_pages($tasks, $pages);
-
-    foreach ($pages['tasks'] as $task) {
-      $page = page_manager_cache_load($task);
-      $task_info = page_manager_get_task_subtasks($page->task);
-      foreach ($page->handler_info as $id => $info) {
-        $page_manager_handler = $page->handlers[$id];
-        if ($page_manager_handler->handler == 'panel_context') {
-
-          // @todo Is there really no better way to check this?
-          $is_exported = ($page_manager_handler->export_type == (EXPORT_IN_CODE | EXPORT_IN_DATABASE) || (isset($page->subtask['storage']) && $page->subtask['storage'] == t('Overridden')));
-
-          if (!empty($page_manager_handler->conf['display'])) {
-            $panels_display = $page_manager_handler->conf['display'];
-            $displays['exported-' . $panels_display->uuid] = $panels_display;
-          }
-          elseif ($is_exported && isset($page_manager_handler->conf['did'])) {
-            $panels_display = panels_load_display($page_manager_handler->conf['did']);
-            if (isset($panels_display->uuid)) {
-              $displays['exported-' . $panels_display->uuid] = $panels_display;
-            }
-          }
-        }
-      }
-    }
-  }
-
-  // Fetch panelizer displays.
-  if (module_exists('panelizer')) {
-    // Fetch all default handlers.
-    $panelizer_defaults = ctools_export_crud_load_all('panelizer_defaults');
-    foreach ($panelizer_defaults as $panelizer_default) {
-      $displays['exported-' . $panelizer_default->display->uuid] = $panelizer_default->display;
-    }
-  }
-  return $displays;
-}
diff --git a/includes/common.inc b/includes/common.inc
deleted file mode 100644
index dda2384..0000000
--- a/includes/common.inc
+++ /dev/null
@@ -1,612 +0,0 @@
-<?php
-
-
-/**
- * @file
- * Functions used by more than one panels client module.
- */
-
-/**
- * Class definition for the allowed layouts governing structure.
- *
- * @ingroup mainapi
- *
- * This class is designed to handle panels allowed layouts data from start to finish, and sees
- * action at two times:\n
- *    - When a client module wants to generate a form allowing an admin to create or edit a set
- *      of allowed layouts. In this case, either a new panels_allowed_layouts object is created
- *      or one is retrieved from storage and panels_allowed_layouts::set_allowed() is called to
- *      generate the allowed layouts form. \n
- *    - When a client module is calling panels_edit_layout(), a saved instantiation of this object
- *      can be called up and passed in to the fourth parameter, and only the allowed layouts saved
- *      in that object will be displayed on the form. \n
- * Because the panels API does not impose a data structure on the allowed_layouts data, client
- * modules can create as many of these objects as they want, and organize them around any concept:
- * node types, date published, author roles...anything.
- *
- * To call the settings form, instantiate this class - or, if your client module's needs are
- * heavy-duty, extend this class and instantiate your subclass - assign values to any relevant
- * desired members, and call panels_allowed_layouts::set_allowed(). See the documentation on
- * that method for a sample implementation.
- *
- * Note that when unserializing saved tokens of this class, you must
- * run panels_load_include('common') before unserializing in order to ensure
- * that the object is properly loaded.
- *
- * Client modules extending this class should implement a save() method and use it for
- * their custom data storage routine. You'll need to rewrite other class methods if
- * you choose to go another route.
- *
- * @see panels_edit_layout()
- * @see _panels_edit_layout()
- */
-class panels_allowed_layouts {
-
-  /**
-   * Specifies whether newly-added layouts (as in, new .inc files) should be automatically
-   *  allowed (TRUE) or disallowed (FALSE) for $this. Defaults to TRUE, which is more
-   *  permissive but less of an administrative hassle if/when you add new layouts. Note
-   *  that this parameter will be derived from $allowed_layouts if a value is passed in.
-   */
-  var $allow_new = TRUE;
-
-  /**
-   * Optional member. If provided, the Panels API will generate a drupal variable using
-   *  variable_set($module_name . 'allowed_layouts', serialize($this)), thereby handling the
-   *  storage of this object entirely within the Panels API. This object will be
-   *  called and rebuilt by panels_edit_layout() if the same $module_name string is passed in
-   *  for the $allowed_types parameter. \n
-   *  This is primarily intended for convenience - client modules doing heavy-duty implementations
-   *  of the Panels API will probably want to create their own storage method.
-   *
-   * @see panels_edit_layout()
-   */
-  var $module_name = NULL;
-
-  /**
-   * An associative array of all available layouts, keyed by layout name (as defined
-   *  in the corresponding layout plugin definition), with value = 1 if the layout is
-   *  allowed, and value = 0 if the layout is not allowed.
-   *  Calling array_filter(panels_allowed_layouts::$allowed_layout_settings) will return an associative array
-   *  containing only the allowed layouts, and wrapping that in array_keys() will
-   *  return an indexed version of that array.
-   */
-  var $allowed_layout_settings = array();
-
-  /**
-   * Hack-imitation of D6's $form_state. Used by the panels_common_set_allowed_types()
-   * form to indicate whether the returned value is in its 'render', 'failed-validate',
-   * or 'submit' stage.
-   */
-  var $form_state;
-
-  /**
-   * Constructor function; loads the $allowed_layout_settings array with initial values according
-   * to $start_allowed.
-   *
-   * @param bool $start_allowed
-   *   $start_allowed determines whether all available layouts will be marked
-   *   as allowed or not allowed on the initial call to panels_allowed_layouts::set_allowed()
-   */
-  function panels_allowed_layouts($start_allowed = TRUE) {
-    // TODO would be nice if there was a way to just fetch the names easily.
-    foreach ($this->list_layouts() as $layout_name) {
-      $this->allowed_layout_settings[$layout_name] = $start_allowed ? 1 : 0;
-    }
-  }
-
-  /**
-   * Manage panels_common_set_allowed_layouts(), the FAPI code for selecting allowed layouts.
-   *
-   * MAKE SURE to set panels_allowed_layouts::allow_new before calling this method. If you want the panels API
-   * to handle saving these allowed layout settings, panels_allowed_layouts::module_name must also be set.
-   *
-   * Below is a sample implementation; refer to the rest of the class documentation to understand all the
-   * specific pieces. Values that are intended to be replaced are wrapped with <>.
-   *
-   * \n @code
-   *  function docdemo_allowed_layouts() {
-   *    ctools_include('common', 'panels');
-   *    if (!is_a($allowed_layouts = unserialize(variable_get('panels_common_allowed_layouts', serialize(''))), 'panels_allowed_layouts')) {
-   *     $allowed_layouts = new panels_allowed_layouts();
-   *      $allowed_layouts->allow_new = TRUE;
-   *      $allowed_layouts->module_name = '<client_module_name>';
-   *    }
-   *    $result = $allowed_layouts->set_allowed('<Desired client module form title>');
-   *    if (in_array($allowed_layouts->form_state, array('failed-validate', 'render'))) {
-   *     return $result;
-   *    }
-   *    elseif ($allowed_layouts->form_state == 'submit') {
-   *      drupal_goto('</path/to/desired/redirect>');
-   *    }
-   *  }
-   *
-   * @endcode \n
-   *
-   * If $allowed_layouts->form_state == 'failed-validate' || 'render', then you'll need to return
-   * $result as it contains the structured form HTML generated by drupal_render_form() and is ready
-   * to be passed through index.php's call to theme('page', ...).
-   *
-   * However, if $allowed_layouts->form_state == 'submit', then the form has been submitted and we should
-   * react. It's really up to your client module how you handle the rest; panels_allowed_layouts::save() (or
-   * panels_allowed_layouts::api_save(), if that's the route you're going) will have already been called,
-   * so if those methods handle your save routine, then all there is left to do is handle redirects, if you
-   * want. The current implementation of the allowed layouts form currently never redirects, so it's up to
-   * you to control where the user ends up next.
-   *
-   * @param string $title
-   *   Used to set the title of the allowed layouts form. If no value is given, defaults to
-   *   'Panels: Allowed Layouts'.
-   *
-   * @return mixed $result
-   *  - On the first passthrough when the form is being rendered, $result is the form's structured
-   *    HTML, ready to be pushed to the screen with a call to theme('page', ...).
-   *  - A successful second passthrough indicates a successful submit, and
-   *    $result === panels_allowed_layouts::allowed_layout_settings. Returning it is simply for convenience.
-   */
-  function set_allowed($title = 'Panels: Allowed Layouts') {
-    $this->sync_with_available();
-    $form_id = 'panels_common_set_allowed_layouts';
-    // TODO switch to drupal_build_form(); need to pass by ref.
-    $form = drupal_retrieve_form($form_id, $this, $title);
-
-    if ($result = drupal_process_form($form_id, $form)) {
-      // Successful submit.
-      $this->form_state = 'submit';
-      return $result;
-    }
-    $this->form_state = isset($_POST['op']) ? 'failed-validate' : 'render';
-    $result = drupal_render_form($form_id, $form);
-    return $result;
-  }
-
-  /**
-   * Checks for newly-added layouts and deleted layouts. If any are found, updates panels_allowed_layouts::allowed_layout_settings;
-   * new additions are made according to panels_allowed_layouts::allow_new, while deletions are unset().
-   *
-   * Note that any changes made by this function are not saved in any permanent location.
-   */
-  function sync_with_available() {
-    $layouts = $this->list_layouts();
-    foreach (array_diff($layouts, array_keys($this->allowed_layout_settings)) as $new_layout) {
-      $this->allowed_layout_settings[$new_layout] = $this->allow_new ? 1 : 0;
-    }
-    foreach (array_diff(array_keys($this->allowed_layout_settings), $layouts) as $deleted_layout) {
-      unset($this->allowed_layout_settings[$deleted_layout]);
-    }
-  }
-
-  /**
-   * Use panels_allowed_layouts::module_name to generate a variable for variable_set(), in which
-   * a serialized version of $this will be stored.
-   *
-   * Does nothing if panels_allowed_layouts::module_name is not set.
-   *
-   * IMPORTANT NOTE: if you use variable_get() in a custom client module save() method, you MUST
-   * wrap $this in serialize(), then unserialize() what you get from variable_get(). Failure to
-   * do so will result in an incomplete object. The following code will work:
-   * @code
-   *  $allowed_layouts = unserialize(variable_get('your_variable_name', serialize(''));
-   * @endcode
-   *
-   * If you don't serialize the second parameter of variable_get() and the variable name you provide
-   * can't be found, an E_STRICT warning will be generated for trying to unserialize an entity
-   * that has not been serialized.
-   */
-  function save() {
-    if (!is_null($this->module_name)) {
-      variable_set($this->module_name . "_allowed_layouts", serialize($this));
-    }
-  }
-
-  /**
-   * Snag a list of the current layouts for internal use.
-   *
-   * Data is not saved in a class member in order to ensure that it's
-   * fresh.
-   *
-   * @return array $layouts
-   *  An indexed array of the system names for all currently available layouts.
-   */
-  function list_layouts() {
-    static $layouts = array();
-    if (empty($layouts)) {
-      ctools_include('plugins', 'panels');
-      $layouts = array_keys(panels_get_layouts());
-    }
-    return $layouts;
-  }
-
-}
-
-/**
- * A common settings page for Panels modules, because this code is relevant to
- * any modules that don't already have special requirements.
- */
-function panels_common_settings($form, &$form_state, $module_name = 'panels_common') {
-  ctools_include('plugins', 'panels');
-  ctools_include('content');
-  $content_types = ctools_get_content_types();
-  $skip = FALSE;
-
-  $default_types = variable_get($module_name . '_default', NULL);
-  if (!isset($default_types)) {
-    $default_types = array('other' => TRUE);
-    $skip = TRUE;
-  }
-
-  foreach ($content_types as $id => $info) {
-    if (empty($info['single'])) {
-      $default_options[$id] = t('New @s', array('@s' => $info['title']));
-      if ($skip) {
-        $default_types[$id] = TRUE;
-      }
-    }
-  }
-
-  $default_options['other'] = t('New content of other types');
-
-  $form['additional_settings'] = array(
-    '#type' => 'vertical_tabs',
-  );
-
-  $form['common'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('New content behavior'),
-    '#group' => 'additional_settings',
-    '#weight' => -10,
-  );
-  $form['common']['panels_common_default'] = array(
-    '#type' => 'checkboxes',
-    '#description' => t('Select the default behavior of new content added to the system. If checked, new content will automatically be immediately available to be added to Panels pages. If not checked, new content will not be available until specifically allowed here.'),
-    '#options' => $default_options,
-    '#default_value' => array_keys(array_filter($default_types)),
-  );
-
-  $form_state['skip'] = $skip;
-  if ($skip) {
-    $form['markup'] = array('#value' => t('<p>Click Submit to be presented with a complete list of available content types set to the defaults you selected.</p>'));
-  }
-  else {
-    // Rebuild the entire list, setting appropriately from defaults. Give
-    // each type its own checkboxes set unless it's 'single' in which
-    // case it can go into our fake other set.
-    $available_content_types = ctools_content_get_all_types();
-    $allowed_content_types = variable_get($module_name . '_allowed_types', array());
-
-    foreach ($available_content_types as $id => $types) {
-      foreach ($types as $type => $info) {
-        $key = $id . '-' . $type;
-        $checkboxes = empty($content_types[$id]['single']) ? $id : 'other';
-        $options[$checkboxes][$key] = $info['title'];
-        if (!isset($allowed_content_types[$key])) {
-          $allowed[$checkboxes][$key] = isset($default_types[$id]) ? $default_types[$id] : $default_types['other'];
-        }
-        else {
-          $allowed[$checkboxes][$key] = $allowed_content_types[$key];
-        }
-      }
-    }
-
-    $form['content_types'] = array(
-      '#tree' => TRUE,
-    );
-
-    // Cheat a bit.
-    $content_types['other'] = array('title' => t('Other'), 'weight' => 10);
-    foreach ($content_types as $id => $info) {
-      if (isset($allowed[$id])) {
-
-        $form['content_types'][$id] = array(
-          '#type' => 'fieldset',
-          '#group' => 'additional_settings',
-          '#title' => t('Allowed @s content', array('@s' => $info['title'])),
-        );
-
-        $form['content_types'][$id]['options'] = array(
-          '#prefix' => '<div class="panels-page-type-container">',
-          '#suffix' => '</div>',
-          '#type' => 'checkboxes',
-          '#options' => $options[$id],
-          '#default_value' => array_keys(array_filter($allowed[$id])),
-          '#checkall' => TRUE,
-        );
-      }
-    }
-  }
-
-  // Layout selection.
-  panels_common_allowed_layouts_form($form, $form_state, $module_name);
-
-  $form['allowed'] = array(
-    '#type' => 'value',
-    '#value' => isset($allowed) ? array_keys($allowed) : array(),
-  );
-
-  $form['module_name'] = array(
-    '#type' => 'value',
-    '#value' => $module_name,
-  );
-
-  $form['submit'] = array(
-    '#type' => 'submit',
-    '#value' => t('Save'),
-  );
-
-  ctools_add_css('panels_page', 'panels');
-  return $form;
-}
-
-/**
- * Submit hook for panels_common_settings.
- */
-function panels_common_settings_validate($form, &$form_state) {
-  panels_common_allowed_layouts_form_validate($form, $form_state);
-}
-
-/**
- * Submit hook for panels_common_settings.
- */
-function panels_common_settings_submit($form, &$form_state) {
-  panels_common_allowed_layouts_form_submit($form, $form_state);
-  $module_name = $form_state['values']['module_name'];
-  variable_set($module_name . '_default', $form_state['values']['panels_common_default']);
-  if (!$form_state['skip']) {
-    // Merge the broken apart array neatly back together.
-    $allowed = $form_state['values']['allowed'];
-    $allowed_content_types = array();
-    foreach ($form_state['values']['allowed'] as $allowed) {
-      $allowed_content_types = array_merge($allowed_content_types, $form_state['values']['content_types'][$allowed]['options']);
-    }
-    variable_set($module_name . '_allowed_types', $allowed_content_types);
-  }
-  drupal_set_message(t('Your changes have been saved.'));
-}
-
-/**
- * Based upon the settings, get the allowed types for this node.
- */
-function panels_common_get_allowed_types($module, $contexts = array(), $has_content = FALSE, $default_defaults = array(), $default_allowed_types = array()) {
-  // Get a list of all types that are available.
-  $default_types = variable_get($module . '_default', $default_defaults);
-  $allowed_types = variable_get($module . '_allowed_types', $default_allowed_types);
-
-  // By default, if they haven't gone and done the initial setup here,
-  // let all 'other' types (which will be all types) be available.
-  if (!isset($default_types['other'])) {
-    $default_types['other'] = TRUE;
-  }
-
-  ctools_include('content');
-  $content_types = ctools_content_get_available_types($contexts, $has_content, $allowed_types, $default_types);
-
-  return $content_types;
-}
-
-/**
- * The FAPI code for generating an 'allowed layouts' selection form.
- *
- * NOTE: Because the Panels API does not guarantee a particular method of storing the data on allowed layouts,
- * it is not_possible for the Panels API to implement any checks that determine whether reductions in
- * the set of allowed layouts conflict with pre-existing layout selections. $displays in that category
- * will continue to function with their current layout as normal until the user/owner/admin attempts
- * to change layouts on that display, at which point they will have to select from the new set of
- * allowed layouts. If this is not the desired behavior for your client module, it's up to you to
- * write a validation routine that determines what should be done with conflicting layouts.
- *
- * Remember that changing layouts where panes have already been created can result in data loss;
- * consult panels_change_layout() to see how the Panels API handles that process. Running
- * drupal_execute('panels_change_layout', ...) is one possible starting point.
- *
- * @ingroup forms
- *
- * @param array $allowed_layouts
- *   The set of allowed layouts that should be used as the default values
- *   for this form. If none is provided, then by default no layouts will be restricted.
- */
-function panels_common_allowed_layouts_form(&$form, &$form_state, $module_name) {
-  // Fetch our allowed layouts from variables.
-  $allowed_layouts = panels_common_get_allowed_layout_object($module_name);
-
-  $layouts = panels_get_layouts();
-  foreach ($layouts as $id => $layout) {
-    $options[$id] = panels_print_layout_icon($id, $layout, check_plain($layout['title']));
-  }
-
-  $form_state['allowed_layouts'] = &$allowed_layouts;
-
-  ctools_add_js('layout', 'panels');
-
-  $form['layout_selection'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Select allowed layouts'),
-    '#group' => 'additional_settings',
-    '#weight' => 10,
-  );
-  $form['layout_selection']['layouts'] = array(
-    '#type' => 'checkboxes',
-    '#options' => $options,
-    '#description' => t('Check the boxes for all layouts you want to allow users choose from when picking a layout. You must allow at least one layout.'),
-    '#default_value' => array_keys(array_filter($allowed_layouts->allowed_layout_settings)),
-    '#prefix' => '<div class="clearfix panels-layouts-checkboxes">',
-    '#suffix' => '</div>',
-    '#checkall' => TRUE,
-  );
-
-  return $form;
-}
-
-function panels_common_allowed_layouts_form_validate($form, &$form_state) {
-  $selected = array_filter($form_state['values']['layouts']);
-  if (empty($selected)) {
-    form_set_error('layouts', 'You must choose at least one layout to allow.');
-  }
-}
-
-function panels_common_allowed_layouts_form_submit($form, &$form_state) {
-  foreach ($form_state['values']['layouts'] as $layout => $setting) {
-    $form_state['allowed_layouts']->allowed_layout_settings[$layout] = (bool) $setting;
-  }
-  $form_state['allowed_layouts']->save();
-}
-
-/**
- * Get the allowed layout object for the given module.
- */
-function panels_common_get_allowed_layout_object($module_name) {
-  $allowed_layouts = unserialize(variable_get($module_name . "_allowed_layouts", serialize('')));
-
-  // If no parameter was provided, or the variable_get failed.
-  if (!$allowed_layouts) {
-    // Still no dice. simply creates a dummy version where all layouts
-    // are allowed.
-    $allowed_layouts = new panels_allowed_layouts();
-    $allowed_layouts->allow_new = TRUE;
-    $allowed_layouts->module_name = $module_name;
-  }
-
-  // Sanitize allowed layout listing; this is redundant if the
-  // $allowed_layouts param was null, but the data is cached anyway.
-  $allowed_layouts->sync_with_available();
-
-  return $allowed_layouts;
-}
-
-/**
- * Get the allowed layouts for the given module.
- */
-function panels_common_get_allowed_layouts($module_name) {
-  ctools_include('plugins', 'panels');
-  $available_layouts = panels_get_layouts();
-  if (empty($module_name)) {
-    return $available_layouts;
-  }
-  elseif (is_object($module_name)) {
-    $allowed_layouts = $module_name;
-  }
-  else {
-    $allowed_layouts = panels_common_get_allowed_layout_object($module_name);
-  }
-
-  $allowed = array_filter($allowed_layouts->allowed_layout_settings);
-  $order = array();
-  foreach ($available_layouts as $name => $plugin) {
-    if (!empty($allowed[$name])) {
-      $order[$name] = $plugin['category'] . ':' . $plugin['title'];
-    }
-  }
-
-  // Sort.
-  $layouts = array();
-
-  asort($order);
-  foreach ($order as $name => $junk) {
-    $layouts[$name] = $available_layouts[$name];
-  }
-
-  return $layouts;
-}
-
-/**
- * Create a visible list of content in a display.
- * Note that the contexts must be pre-loaded.
- */
-function theme_panels_common_content_list($vars) {
-  $display = $vars['display'];
-
-  $layout = panels_get_layout($display->layout);
-  $content = '<dl class="content-list">';
-  foreach (panels_get_regions($layout, $display) as $panel_id => $title) {
-    $content .= "<dt>$title</dt><dd>";
-    if (!empty($display->panels[$panel_id])) {
-      $content .= '<ol>';
-      foreach ($display->panels[$panel_id] as $pid) {
-        $content .= '<li>' . panels_get_pane_title($display->content[$pid], $display->context) . '</li>';
-      }
-      $content .= '</ol>';
-    }
-    else {
-      $content .= t('Empty');
-    }
-    $content .= '</dd>';
-  }
-  $content .= '</dl>';
-  return $content;
-}
-
-/**
- * Print a selector of layouts, each linked to the next step.
- *
- * Most operations use radio buttons for selecting layouts, but some will
- * give each layout as a link that goes to the next step. This function
- * makes it easy to simply provide a list of allowed layouts and the base
- * path.
- *
- * One limitation is that it will only append the layout name to the end, so
- * if the actual layout name is needed in the middle, that can't happen.
- *
- * @return
- *   The rendered output.
- */
-function panels_common_print_layout_links($layouts, $base_path, $link_options = array(), $current_layout = NULL) {
-  $output = '';
-
-  $categories = array();
-  ctools_include('cleanstring');
-  $default_category = '';
-  foreach ($layouts as $id => $layout) {
-    $category = ctools_cleanstring($layout['category']);
-
-    $categories[$category] = $layout['category'];
-    if ($id == $current_layout) {
-      $default_category = $category;
-    }
-
-    $options[$category][$id] = panels_print_layout_link($id, $layout, $base_path . '/' . $id, $link_options, $current_layout);
-  }
-
-  $form = array();
-  $form['categories'] = array(
-    '#title' => t('Category'),
-    '#type' => 'select',
-    '#options' => $categories,
-    '#name' => 'categories',
-    '#id' => 'edit-categories',
-    '#value' => $default_category,
-    '#parents' => array('categories'),
-    '#access' => (count($categories) > 1) ? TRUE : FALSE,
-  );
-
-  $output .= drupal_render($form);
-
-  $output .= '<div class="panels-choose-layout panels-layouts-checkboxes clearfix">';
-
-  // We're doing these dependencies completely manualy, which is unusual, but
-  // the process code only supports doing them in a form.
-  // @todo modify dependent.inc to make this easier.
-  $dependencies = array();
-  foreach ($options as $category => $links) {
-    $dependencies['panels-layout-category-' . $category] = array(
-      'values' => array('edit-categories' => array($category)),
-      'num' => 1,
-      'type' => 'hide',
-    );
-
-    $output .= '<div id="panels-layout-category-' . $category . '-wrapper">';
-    $output .= '<div id="panels-layout-category-' . $category . '" class="form-checkboxes clearfix">';
-    $output .= (count($categories) > 1) ? '<div class="panels-layouts-category">' . $categories[$category] . '</div>' : '';
-
-    foreach ($links as $key => $link) {
-      $output .= $link;
-    }
-    $output .= '</div></div>';
-  }
-
-  $output .= '</div>';
-
-  ctools_add_js('dependent');
-  $js['CTools']['dependent'] = $dependencies;
-  drupal_add_js($js, 'setting');
-
-  return $output;
-}
diff --git a/includes/display-edit.inc b/includes/display-edit.inc
deleted file mode 100644
index c7153e1..0000000
--- a/includes/display-edit.inc
+++ /dev/null
@@ -1,329 +0,0 @@
-<?php
-
-/**
- * @file
- * Core Panels API include file containing various display-editing functions.
- * This includes all the basic editing forms (content, layout, layout settings)
- * as well as the ajax modal forms associated with them.
- */
-
-/**
- * Handle calling and processing of the form for editing display content.
- *
- * Helper function for panels_edit().
- *
- * @see panels_edit() for details on the various behaviors of this function.
- */
-function _panels_edit($display, $destination, $content_types, $title = FALSE) {
-  $did = $display->did;
-  if (!$did) {
-    $display->did = $did = 'new';
-  }
-
-  // Load the display being edited from cache, if possible.
-  if (!empty($_POST) && is_object($cache = panels_edit_cache_get($did))) {
-    $display = $cache->display;
-  }
-  else {
-    $cache = panels_edit_cache_get_default($display, $content_types, $title);
-  }
-
-  // Get a renderer.
-  $renderer = panels_get_renderer_handler('editor', $display);
-  $renderer->cache = $cache;
-
-  $output = $renderer->edit();
-  if (is_object($output) && $destination) {
-    return panels_goto($destination);
-  }
-  return $output;
-}
-
-/**
- * Form definition for the panels display editor.
- *
- * No validation function is necessary, as all 'validation' is handled
- * either in the lead-up to form rendering (through the selection of
- * specified content types) or by the validation functions specific to
- * the ajax modals & content types.
- *
- * @ingroup forms
- *
- * @see panels_edit_display_submit()
- */
-function panels_edit_display_form($form, &$form_state) {
-  $display = &$form_state['display'];
-  $renderer = &$form_state['renderer'];
-
-  // Make sure there is a valid cache key.
-  $cache_key = isset($display->cache_key) ? $display->cache_key : $display->did;
-  $display->cache_key = $cache_key;
-
-  // Annoyingly, theme doesn't have access to form_state so we have to do this.
-  $form['#display'] = $display;
-
-  // The flexible layout maker wants to be able to edit a display without
-  // actually editing a display, so we provide this 'setting' to allow
-  // that to go away.
-  if (empty($form_state['no display settings'])) {
-    $links = $renderer->get_display_links();
-  }
-  else {
-    $renderer->no_edit_links = TRUE;
-    $links = '';
-  }
-  $form['hide']['display-settings'] = array(
-    '#markup' => $links,
-  );
-
-  $form += panels_edit_display_settings_form($form, $form_state);
-
-  $form['panel'] = array('#tree' => TRUE);
-  $form['panel']['pane'] = array('#tree' => TRUE);
-
-  $form['display'] = array(
-    '#markup' => $renderer->render(),
-  );
-
-  foreach ($renderer->plugins['layout']['regions'] as $region_id => $title) {
-    // Make sure we at least have an empty array for all possible locations.
-    if (!isset($display->panels[$region_id])) {
-      $display->panels[$region_id] = array();
-    }
-
-    $form['panel']['pane'][$region_id] = array(
-      // Use 'hidden' instead of 'value' so the js can access it.
-      '#type' => 'hidden',
-      '#default_value' => implode(',', (array) $display->panels[$region_id]),
-    );
-  }
-
-  if (empty($form_state['no buttons'])) {
-    $form['buttons']['submit'] = array(
-      '#type' => 'submit',
-      '#value' => t('Save'),
-      '#id' => 'panels-dnd-save',
-      '#submit' => array('panels_edit_display_form_submit'),
-      '#save-display' => TRUE,
-    );
-    $form['buttons']['cancel'] = array(
-      '#type' => 'submit',
-      '#value' => t('Cancel'),
-    );
-  }
-
-  // Build up the preview portion of the form, if necessary.
-  if (empty($form_state['no preview'])) {
-    $form['preview'] = array(
-      '#tree' => TRUE,
-      '#prefix' => '<h2>' . t('Live preview') . '</h2>' . '<div id="panels-live-preview">',
-      '#suffix' => '</div>',
-    );
-
-    ctools_context_replace_form($form['preview'], $display->context);
-    $form['preview']['button'] = array(
-      '#type' => 'submit',
-      '#value' => t('Preview'),
-      '#attributes' => array('class' => array('use-ajax-submit')),
-      '#id' => 'panels-live-preview-button',
-      '#submit' => array('panels_edit_display_form_submit', 'panels_edit_display_form_preview'),
-    );
-  }
-
-  return $form;
-}
-
-/**
- * Handle form validation of the display content editor.
- */
-function panels_edit_display_form_validate($form, &$form_state) {
-  panels_edit_display_settings_form_validate($form, $form_state);
-}
-
-/**
- * Handle form submission of the display content editor.
- *
- * This reads the location of the various panes from the form, which will
- * have been modified from the ajax, rearranges them and then saves
- * the display.
- */
-function panels_edit_display_form_submit($form, &$form_state) {
-  $display = &$form_state['display'];
-
-  $old_content = $display->content;
-  $display->content = array();
-
-  if (!empty($form_state['values']['panel']['pane'])) {
-    foreach ($form_state['values']['panel']['pane'] as $region_id => $panes) {
-      $display->panels[$region_id] = array();
-      if ($panes) {
-        $pids = explode(',', $panes);
-        // Need to filter the array, b/c passing it in a hidden field can generate trash.
-        foreach (array_filter($pids) as $pid) {
-          if ($old_content[$pid]) {
-            $display->panels[$region_id][] = $pid;
-            $old_content[$pid]->panel = $region_id;
-            $display->content[$pid] = $old_content[$pid];
-
-            // If the panel has region locking, make sure that the region
-            // the panel is in is applicable. This can happen if the panel
-            // was moved and then the lock changed and the server didn't
-            // know.
-            if (!empty($old_content[$pid]->locks) && $old_content[$pid]->locks['type'] == 'regions') {
-              $old_content[$pid]->locks['regions'][$region_id] = $region_id;
-            }
-          }
-        }
-      }
-    }
-  }
-
-  panels_edit_display_settings_form_submit($form, $form_state);
-}
-
-/**
- * Submission of the preview button. Render the preview and put it into
- * the preview widget area.
- */
-function panels_edit_display_form_preview(&$form, &$form_state) {
-  $display = &$form_state['display'];
-  ctools_include('ajax');
-
-  $display->context = ctools_context_replace_placeholders($display->context, $form_state['values']['preview']);
-  $display->skip_cache = TRUE;
-  $output = panels_render_display($display);
-
-  // Add any extra CSS that some layouts may have added specifically for this.
-  if (!empty($display->add_css)) {
-    $output = "<style type=\"text/css\">\n$display->add_css</style>\n" . $output;
-  }
-
-  $commands = array();
-  $commands[] = array(
-    'command' => 'panel_preview',
-    'output' => $output,
-  );
-
-  print ajax_render($commands);
-  ajax_footer();
-  exit;
-}
-
-
-/**
- * Form for display settings.
- */
-function panels_edit_display_settings_form($form, &$form_state) {
-  $display = &$form_state['display'];
-
-  $layout = panels_get_layout($display->layout);
-  $form_state['layout'] = $layout;
-
-  ctools_include('dependent');
-
-  if ($form_state['display_title']) {
-    $form['display_title'] = array(
-      '#tree' => TRUE,
-    );
-
-    $form['display_title']['hide_title'] = array(
-      '#type' => 'select',
-      '#title' => t('Title type'),
-      '#default_value' => (int) $display->hide_title,
-      '#options' => array(
-        PANELS_TITLE_NONE => t('No title'),
-        PANELS_TITLE_FIXED => t('Manually set'),
-        PANELS_TITLE_PANE => t('From pane'),
-      ),
-    );
-
-    $form['display_title']['title'] = array(
-      '#type' => 'textfield',
-      '#default_value' => $display->title,
-      '#title' => t('Title'),
-      '#description' => t('The title of this panel. If left blank, a default title may be used. Set to No Title if you want the title to actually be blank.'),
-      '#process' => array('ctools_dependent_process'),
-      '#dependency' => array('edit-display-title-hide-title' => array(PANELS_TITLE_FIXED)),
-      '#maxlength' => 255,
-    );
-
-    if (!empty($display->context)) {
-      $form['display_title']['title']['#description'] .= ' ' . t('You may use substitutions in this title.');
-
-      // We have to create a manual fieldset because fieldsets do not support IDs.
-      // Use 'hidden' instead of 'markup' so that the process will run.
-      // Add js for collapsible fieldsets manually
-//      drupal_add_js('misc/form.js');
-//      drupal_add_js('misc/collapse.js');
-//      $form['display_title']['contexts_prefix'] = array(
-//        '#type' => 'hidden',
-//        '#id' => 'edit-display-substitutions',
-//        '#prefix' => '<div><fieldset id="edit-display-substitutions" class="collapsed collapsible"><legend>' . t('Substitutions') . '</legend><div class="fieldset-wrapper">',
-//        '#process' => array('ctools_dependent_process'),
-//        '#dependency' => array('edit-display-title-hide-title' => array(PANELS_TITLE_FIXED)),
-//      );
-
-      $rows = array();
-      foreach ($display->context as $context) {
-        foreach (ctools_context_get_converters('%' . check_plain($context->keyword) . ':', $context) as $keyword => $title) {
-          $rows[] = array(
-            check_plain($keyword),
-            t('@identifier: @title', array('@title' => $title, '@identifier' => $context->identifier)),
-          );
-        }
-      }
-
-      $header = array(t('Keyword'), t('Value'));
-      $form['display_title']['contexts'] = array(
-        '#type' => 'fieldset',
-        '#title' => t('Substitutions'),
-        '#collapsible' => TRUE,
-        '#collapsed' => TRUE,
-        '#value' => theme('table', array('header' => $header, 'rows' => $rows)),
-//        '#process' => array('form_process_fieldset', 'ctools_dependent_process'),
-//        '#id' => 'edit-display-title-context',
-//        '#dependency' => array('edit-display-title-hide-title' => array(PANELS_TITLE_FIXED)),
-      );
-//      $form['display_title']['contexts_suffix'] = array(
-//        '#value' => '</div></fieldset></div>',
-//      );
-    }
-  }
-
-  // TODO doc the ability to do this as part of the API.
-  if (!empty($layout['settings form']) && function_exists($layout['settings form'])) {
-    $form['layout_settings'] = $layout['settings form']($display, $layout, $display->layout_settings);
-  }
-  $form['layout_settings']['#tree'] = TRUE;
-
-  return $form;
-}
-
-/**
- * Validate the layout settings form.
- */
-function panels_edit_display_settings_form_validate($form, &$form_state) {
-  if ($function = panels_plugin_get_function('layout', $form_state['layout'], 'settings validate')) {
-    $function($form_state['values']['layout_settings'], $form['layout_settings'], $form_state['display'], $form_state['layout'], $form_state['display']->layout_settings);
-  }
-}
-
-/**
- * Store changes from the layout settings form.
- */
-function panels_edit_display_settings_form_submit($form, &$form_state) {
-  $display = &$form_state['display'];
-  if ($function = panels_plugin_get_function('layout', $form_state['layout'], 'settings submit')) {
-    $function($form_state['values']['layout_settings'], $display, $form_state['layout'], $display->layout_settings);
-  }
-
-  // Since not all layouts have layout settings, check here in case of notices.
-  if (isset($form_state['values']['layout_settings'])) {
-    $display->layout_settings = $form_state['values']['layout_settings'];
-  }
-
-  if (isset($form_state['values']['display_title']['title'])) {
-    $display->title = $form_state['values']['display_title']['title'];
-    $display->hide_title = $form_state['values']['display_title']['hide_title'];
-  }
-}
diff --git a/includes/display-layout.inc b/includes/display-layout.inc
deleted file mode 100644
index 4edd1d1..0000000
--- a/includes/display-layout.inc
+++ /dev/null
@@ -1,331 +0,0 @@
-<?php
-
-/**
- * @file
- * Handle the forms for changing a display's layout.
- */
-
-/**
- * Handle calling and processing of the form for editing display layouts.
- *
- * Helper function for panels_edit_layout().
- *
- * @see panels_edit_layout() for details on the various behaviors of this function.
- */
-function _panels_edit_layout($display, $finish, $destination, $allowed_layouts) {
-  ctools_include('common', 'panels');
-
-  $form_state = array(
-    'display' => &$display,
-    'finish' => $finish,
-    'destination' => $destination,
-    'allowed_layouts' => $allowed_layouts,
-    're_render' => FALSE,
-    'no_redirect' => TRUE,
-  );
-
-  $change_form_state = $form_state;
-
-  $change_form = FALSE;
-
-  // Examine $_POST to see which form they're currently using.
-  if (empty($_POST) || empty($_POST['form_id']) || $_POST['form_id'] != 'panels_change_layout') {
-    $output = drupal_build_form('panels_choose_layout', $form_state);
-    if (!empty($form_state['executed'])) {
-      // Upon submission go to next form.
-      $change_form_state['layout'] = $_SESSION['layout'][$display->did] = $form_state['layout'];
-      $change_form = TRUE;
-    }
-  }
-  else {
-    $change_form_state['layout'] = $_SESSION['layout'][$display->did];
-    $change_form = TRUE;
-  }
-
-  if ($change_form) {
-    $output = drupal_build_form('panels_change_layout', $change_form_state);
-    if (!empty($change_form_state['executed'])) {
-      if (isset($change_form_state['back'])) {
-        unset($_POST);
-        return _panels_edit_layout($display, $finish, $destination, $allowed_layouts);
-      }
-
-      if (!empty($change_form_state['clicked_button']['#save-display'])) {
-        drupal_set_message(t('Panel layout has been updated.'));
-        panels_save_display($display);
-      }
-
-      if ($destination) {
-        return panels_goto($destination);
-      }
-      return $change_form_state['display'];
-    }
-  }
-  return $output;
-}
-
-/**
- * Form definition for the display layout editor.
- *
- * @ingroup forms
- */
-function panels_choose_layout($form, &$form_state) {
-  $display = &$form_state['display'];
-  ctools_include('common', 'panels');
-  ctools_include('cleanstring');
-
-  $layouts = panels_common_get_allowed_layouts($form_state['allowed_layouts']);
-  $categories = array();
-  $current = '';
-  foreach ($layouts as $id => $layout) {
-    $category = ctools_cleanstring($layout['category']);
-    // Default category to first in case layout doesn't exist or there isn't one.
-    if (empty($current)) {
-      $current = $category;
-    }
-
-    $categories[$category] = $layout['category'];
-    $options[$category][$id] = panels_print_layout_icon($id, $layout, check_plain($layout['title']));
-
-    // Set current category to what is chosen.
-    if ($id == $display->layout) {
-      $current = $category;
-    }
-  }
-
-  ctools_add_js('layout', 'panels');
-
-  $form['categories'] = array(
-    '#title' => t('Category'),
-    '#type' => 'select',
-    '#options' => $categories,
-    '#default_value' => $current,
-  );
-
-  $form['layout'] = array(
-    '#prefix' => '<div class="panels-choose-layout panels-layouts-checkboxes clearfix">',
-    '#suffix' => '</div>',
-  );
-
-  // We set up the dependencies manually because these aren't really form
-  // items. It's possible there's a simpler way to do this, but I could not
-  // think of one at the time.
-  $dependencies = array();
-  foreach ($options as $category => $radios) {
-    $dependencies['panels-layout-category-' . $category] = array(
-      'values' => array('edit-categories' => array($category)),
-      'num' => 1,
-      'type' => 'hide',
-    );
-
-    $form['layout'][$category] = array(
-      '#prefix' => '<div id="panels-layout-category-' . $category . '-wrapper"><div id="panels-layout-category-' . $category . '" class="form-checkboxes clearfix"><div class="panels-layouts-category">' . $categories[$category] . '</div>',
-      '#suffix' => '</div></div>',
-    );
-
-    foreach ($radios as $key => $choice) {
-      // Set the first available layout as default value.
-      if (empty($display->layout)) {
-        $display->layout = $key;
-      }
-      // Generate the parents as the autogenerator does, so we will have a
-      // unique id for each radio button.
-      $form['layout'][$category][$key] = array(
-        '#type' => 'radio',
-        '#title' => $choice,
-        '#parents' => array('layout'),
-        '#id' => drupal_clean_css_identifier('edit-layout-' . $key),
-        '#return_value' => check_plain($key),
-        '#default_value' => in_array($display->layout, array_keys($layouts)) ? $display->layout : NULL,
-      );
-    }
-  }
-
-  ctools_add_js('dependent');
-  $js['CTools']['dependent'] = $dependencies;
-  drupal_add_js($js, 'setting');
-
-  if (empty($form_state['no buttons'])) {
-    $form['submit'] = array(
-      '#type' => 'submit',
-      '#value' => t('Next'),
-    );
-  }
-
-  return $form;
-}
-
-/**
- * Handle form submission of the display layout editor.
- */
-function panels_choose_layout_submit($form, &$form_state) {
-  $form_state['layout'] = $form_state['values']['layout'];
-}
-
-/**
- * Form definition for the display layout converter.
- *
- * This form is only triggered if the user attempts to change the layout
- * for a display that has already had content assigned to it. It allows
- * the user to select where the panes located in to-be-deleted panels should
- * be relocated to.
- *
- * @ingroup forms
- *
- * @param array $form
- *   A structured FAPI $form array.
- * @param &$form_state
- *   The Drupal $form_state
- */
-function panels_change_layout($form, &$form_state) {
-  // Provide a temporary display and renderer.
-  $form_state['layout_display'] = $display = panels_new_display();
-  if (isset($form_state['cache_key'])) {
-    $display->cache_key = $form_state['cache_key'];
-  }
-
-  $new_layout = panels_get_layout($form_state['layout']);
-  $new_layout_regions = panels_get_regions($new_layout, $display);
-
-  $old_layout = panels_get_layout($form_state['display']->layout);
-  $old_layout_regions = panels_get_regions($old_layout, $form_state['display']);
-
-  $display->layout = $form_state['layout'];
-  $renderer = panels_get_renderer_handler('editor', $display);
-
-  $renderer->meta_location = 'inline';
-
-  ctools_add_css('panels_admin', 'panels');
-  ctools_add_css('panels_dnd', 'panels');
-  ctools_add_css('dropdown');
-
-  // For every region that had content in the old layout, create a custom pane
-  // in the new layout that represents that region.
-  $keys = array_keys($new_layout_regions);
-  $default_region = reset($keys);
-  foreach ($old_layout_regions as $region_id => $region_name) {
-    if (!empty($form_state['display']->panels[$region_id])) {
-      $pane = panels_new_pane('custom', 'custom', TRUE);
-      $pane->pid = $region_id;
-      $pane->configuration['title'] = t('Panes');
-      $pane->configuration['admin_title'] = $region_name;
-      // Get a list of pane titles used.
-      $titles = array();
-      foreach ($form_state['display']->panels[$region_id] as $pid) {
-        $content_type = ctools_get_content_type($form_state['display']->content[$pid]->type);
-        $titles[$pid] = ctools_content_admin_title($content_type, $form_state['display']->content[$pid]->subtype, $form_state['display']->content[$pid]->configuration, $form_state['display']->context);
-      }
-      $pane->configuration['body'] = '<ul><li>' . implode('</li><li>', $titles) . '</li></ul>';
-
-      // If the region id matches, make it the same; otherwise, put it
-      // in the default region.
-      $pane->panel = empty($new_layout_regions[$region_id]) ? $default_region : $region_id;
-
-      // Add the pane to the approprate spots.
-      $display->content[$pane->pid] = $pane;
-      $display->panels[$pane->panel][] = $pane->pid;
-    }
-  }
-
-  $form['container'] = array(
-    '#prefix' => '<div class="change-layout-display clearfix">',
-    '#suffix' => '</div>',
-  );
-
-  $form['container']['old_layout'] = array(
-    '#markup' => panels_print_layout_icon($form_state['display']->layout, $old_layout, check_plain($old_layout['title'])),
-  );
-
-  $form['container']['right_arrow'] = array(
-    '#markup' => theme('image', array('path' => drupal_get_path('module', 'panels') . '/images/go-right.png')),
-  );
-  $form['container']['new_layout'] = array(
-    '#markup' => panels_print_layout_icon($form_state['layout'], $new_layout, check_plain($new_layout['title'])),
-  );
-
-  $edit_form_state = array(
-    'display' => $display,
-    'renderer' => $renderer,
-    'no buttons' => TRUE,
-    'no preview' => TRUE,
-    'no display settings' => TRUE,
-    'display_title' => '',
-  );
-
-  ctools_include('display-edit', 'panels');
-  $form = panels_edit_display_form($form, $edit_form_state);
-
-  if (empty($form_state['no buttons'])) {
-    $form['back'] = array(
-      '#type' => 'submit',
-      '#value' => t('Back'),
-      '#submit' => array('panels_choose_layout_back'),
-    );
-
-    $form['submit'] = array(
-      '#type' => 'submit',
-      '#value' => $form_state['finish'],
-      '#submit' => array('panels_change_layout_submit'),
-      '#save-display' => TRUE,
-    );
-  }
-  return $form;
-}
-
-/**
- * Handle submission of the change layout form.
- *
- * This submit handler will move panes around and save the display.
- */
-function panels_change_layout_submit($form, &$form_state) {
-  $display = $form_state['display'];
-  $layout_display = $form_state['layout_display'];
-
-  $switch = array();
-
-  // Calculate the pids submitted by the display and make a list of
-  // translation to the regions. Remember the 'pid' of the pane
-  // is the region id in the old layout.
-  if (!empty($form_state['values']['panel']['pane'])) {
-    foreach ($form_state['values']['panel']['pane'] as $region_id => $panes) {
-      if ($panes) {
-        $pids = explode(',', $panes);
-        // Need to filter the array, b/c passing it in a hidden field can generate trash.
-        foreach (array_filter($pids) as $pid) {
-          $switch[$pid] = $region_id;
-        }
-      }
-    }
-  }
-
-  $content = array();
-  foreach ($switch as $region_id => $new_region_id) {
-    if (isset($display->panels[$region_id])) {
-      if (!isset($content[$new_region_id])) {
-        $content[$new_region_id] = array();
-      }
-      $content[$new_region_id] = array_merge($content[$new_region_id], $display->panels[$region_id]);
-    }
-  }
-
-  // Go through each pane and make sure its region id is correct.
-  foreach ($content as $region_id => $region) {
-    foreach ($region as $pid) {
-      $display->content[$pid]->panel = $region_id;
-    }
-  }
-
-  $display->panels = $content;
-
-  $display->layout = $form_state['layout'];
-}
-
-/**
- * Handle submission of the change layout form.
- *
- * This submit handler sets a flag on the form state, which is then used
- * by the calling wrapper to restart the process.
- */
-function panels_choose_layout_back($form, &$form_state) {
-  $form_state['back'] = TRUE;
-}
diff --git a/includes/page-wizard.inc b/includes/page-wizard.inc
deleted file mode 100644
index 1aea71b..0000000
--- a/includes/page-wizard.inc
+++ /dev/null
@@ -1,84 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains helper functions for the Panels page wizards.
- */
-
-/**
- * Add layout form helper for panels page wizards.
- *
- * This is not a proper form, it is meant to be called by a form to add
- * elements to it.
- */
-function panels_page_wizard_add_layout(&$form, &$form_state) {
-  $form_state['allowed_layouts'] = 'panels_page';
-  $form_state['display'] = $form_state['wizard cache']->display;
-
-  // Tell the Panels form not to display buttons.
-  $form_state['no buttons'] = TRUE;
-
-  // Change the #id of the form so the CSS applies properly.
-  $form['#id'] = 'panels-choose-layout';
-
-  $form['layout_prefix'] = array(
-    '#value' => '<fieldset><legend>' . t('Layout') . '</legend>',
-  );
-
-  ctools_include('common', 'panels');
-  ctools_include('display-layout', 'panels');
-  ctools_include('plugins', 'panels');
-
-  $form = panels_choose_layout($form, $form_state);
-
-  $form['layout_suffix'] = array(
-    '#value' => '</fieldset>',
-  );
-
-  // $form_state['cache'] = FALSE;
-}
-
-/**
- * Add content editor form helper for panels page wizards.
- *
- * This is not a proper form, it is meant to be called by a form to add
- * elements to it.
- */
-function panels_page_wizard_add_content(&$form, &$form_state) {
-  ctools_include('ajax');
-  ctools_include('plugins', 'panels');
-  ctools_include('common', 'panels');
-  ctools_include('display-edit', 'panels');
-
-  // Panels provides this caching mechanism to make it easy to use the
-  // wizard to cache the display.
-  $cache = panels_edit_cache_get('panels_page_wizard:' . $form_state['plugin']['name']);
-
-  $form_state['renderer'] = panels_get_renderer_handler('editor', $cache->display);
-  $form_state['renderer']->cache = &$cache;
-
-  $form_state['display'] = &$cache->display;
-  $form_state['content_types'] = $cache->content_types;
-  // Tell the Panels form not to display buttons.
-  $form_state['no buttons'] = TRUE;
-  $form_state['display_title'] = !empty($cache->display_title);
-
-  $form = panels_edit_display_form($form, $form_state);
-}
-
-/**
- * Add content form submit handler.
- *
- * This is not a proper submit handler, it is meant to be called by a form's
- * submit handler to handle submission.
- */
-function panels_page_wizard_add_content_submit(&$form, &$form_state) {
-  // Call the normal panels edit form submit to make sure values are stored
-  // on the display.
-  panels_edit_display_form_submit($form, $form_state);
-  $cache = &$form_state['wizard cache'];
-
-  // Copy the "being edited" cached display to the "actual" cached display.
-  $cache->display = &$form_state['display'];
-  unset($cache->display_cache);
-}
diff --git a/includes/panels.pipelines.inc b/includes/panels.pipelines.inc
deleted file mode 100644
index 5a3f1cb..0000000
--- a/includes/panels.pipelines.inc
+++ /dev/null
@@ -1,33 +0,0 @@
-<?php
-
-/**
- * @file
- * Bulk export of panels_layouts objects generated by Bulk export module.
- */
-
-/**
- * Implements hook_default_panels_renderer_pipeline().
- */
-function panels_default_panels_renderer_pipeline() {
-  $pipelines = array();
-
-  $pipeline = new stdClass();
-  $pipeline->disabled = FALSE; /* Edit this to true to make a default pipeline disabled initially */
-  $pipeline->api_version = 1;
-  $pipeline->name = 'standard';
-  $pipeline->admin_title = t('Standard');
-  $pipeline->admin_description = t('Renders a panel normally. This is the most common option.');
-  $pipeline->weight = -100;
-  $pipeline->settings = array(
-    'renderers' => array(
-      0 => array(
-        'access' => array(),
-        'renderer' => 'standard',
-        'options' => array(),
-      ),
-    ),
-  );
-  $pipelines[$pipeline->name] = $pipeline;
-
-  return $pipelines;
-}
diff --git a/includes/plugins.inc b/includes/plugins.inc
deleted file mode 100644
index aefc5cd..0000000
--- a/includes/plugins.inc
+++ /dev/null
@@ -1,506 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains helper code for plugins and contexts.
- */
-
-/**
- * Determine if a pane is visible.
- *
- * @param $pane
- *   The pane object to test for access.
- * @param $display
- *   The display object containing the pane object to be tested.
- */
-function panels_pane_access($pane, $display) {
-  ctools_include('context');
-  return ctools_access($pane->access, $display->context);
-}
-
-/**
- * Get a list of panels available in the layout.
- */
-function panels_get_regions($layout, $display) {
-  if ($function = ctools_plugin_get_function($layout, 'regions function')) {
-    return $function($display, $display->layout_settings, $layout);
-  }
-
-  if (!empty($layout['regions'])) {
-    return $layout['regions'];
-  }
-
-  return array();
-}
-
-/**
- * Get cached content for a given display and possibly pane.
- *
- * @return
- *   The cached content, or FALSE to indicate no cached content exists.
- */
-function panels_get_cached_content($display, $args, $context, $pane = NULL) {
-  // Never use cache on a POST.
-  if (!empty($_POST)) {
-    return FALSE;
-  }
-
-  $method = $pane ? $pane->cache['method'] : $display->cache['method'];
-  $function = panels_plugin_get_function('cache', $method, 'cache get');
-
-  if (!$function) {
-    return FALSE;
-  }
-
-  $conf = $pane ? $pane->cache['settings'] : $display->cache['settings'];
-  $cache = $function($conf, $display, $args, $context, $pane);
-  if (empty($cache)) {
-    return FALSE;
-  }
-
-  // Restore it.
-  $cache->restore();
-  return $cache;
-}
-
-/**
- * Store cached content for a given display and possibly pane.
- */
-function panels_set_cached_content($cache, $display, $args, $context, $pane = NULL) {
-  // Never use cache on a POST.
-  if (!empty($_POST)) {
-    return FALSE;
-  }
-
-  $method = $pane ? $pane->cache['method'] : $display->cache['method'];
-  $function = panels_plugin_get_function('cache', $method, 'cache set');
-
-  if (!$function) {
-    return FALSE;
-  }
-
-  $conf = $pane ? $pane->cache['settings'] : $display->cache['settings'];
-
-  // Snapshot it.
-  $cache->cache();
-  return $function($conf, $cache, $display, $args, $context, $pane);
-}
-
-/**
- * Clear all cached content for a display.
- */
-function panels_clear_cached_content($display) {
-  // Figure out every method we might be using to cache content in this display:
-  $methods = array();
-  if (!empty($display->cache['method'])) {
-    $methods[$display->cache['method']] = TRUE;
-  }
-
-  foreach ($display->content as $pane) {
-    if (!empty($pane->cache['method'])) {
-      $methods[$pane->cache['method']] = TRUE;
-    }
-  }
-
-  foreach (array_keys($methods) as $method) {
-    $function = panels_plugin_get_function('cache', $method, 'cache clear');
-    if ($function) {
-      $function($display);
-    }
-  }
-}
-
-/**
- * An object to hold caching information while it is happening.
- */
-class panels_cache_object {
-  var $content = '';
-  var $head = NULL;
-  var $css = NULL;
-  var $js = NULL;
-  var $tokens = NULL;
-  var $ready = FALSE;
-
-  /**
-   * When constructed, take a snapshot of our existing out of band data.
-   */
-  function panels_cache_object() {
-    $this->head = drupal_add_html_head();
-    $this->css = drupal_add_css();
-    $this->tokens = ctools_set_page_token();
-    $this->js = drupal_add_js();
-  }
-
-  /**
-   * Add content to the cache. This assumes a pure stream;
-   * use set_content() if it's something else.
-   */
-  function add_content($content) {
-    $this->content .= $content;
-  }
-
-  function set_content($content) {
-    $this->content = $content;
-  }
-
-  /**
-   * Set the object for storing. This overwrites.
-   */
-  function cache() {
-    if ($this->ready) {
-      return;
-    }
-
-    $this->ready = TRUE;
-
-    // Simple replacement for head.
-    $this->head = str_replace($this->head, '', drupal_add_html_head());
-
-    // Slightly less simple for CSS:
-    $css = drupal_add_css();
-    $start = $this->css;
-    $this->css = array();
-
-    foreach ($css as $name => $data) {
-      if (!isset($start[$name])) {
-        $this->css[$name] = $data;
-      }
-    }
-
-    $js = drupal_add_js();
-
-    $start = $this->js;
-    $this->js = array();
-
-    // Use the advanced mapping function from Drupal >= 7.23 if available.
-    $array_mapping_func = function_exists('drupal_array_diff_assoc_recursive') ? 'drupal_array_diff_assoc_recursive' : 'array_diff_assoc';
-
-    // If there are any differences between the old and the new javascript then
-    // store them to be added later.
-    if ($diff = $array_mapping_func($js, $start)) {
-      // Iterate over the diff to ensure we keep the keys on merge and don't add
-      // unnecessary items.
-      foreach ($diff as $key => $diff_data) {
-        // Special case the settings key and get the difference of the data.
-        if ($key === 'settings') {
-          // Iterate over the diff to ensure we keep the keys on merge and don't
-          // add unnecessary items.
-          if (isset($diff[$key]['data'])) {
-            foreach ($diff[$key]['data'] as $settings_key => $settings_data) {
-              // Merge the changes with the base to get a complete settings
-              // array.
-              $this->js[$key]['data'][] = drupal_array_merge_deep($settings_data, $diff[$key]['data'][$settings_key]);
-            }
-          }
-        }
-        else {
-          $this->js[$key] = $diff_data;
-          // Check if the key was present already and if so merge the changes
-          // with the original data to get the full settings array.
-          if (isset($start[$key])) {
-            $this->js[$key] = drupal_array_merge_deep($start[$key], $this->js[$key]);
-          }
-        }
-      }
-    }
-
-    // And for tokens:
-    $tokens = ctools_set_page_token();
-    foreach ($this->tokens as $token => $argument) {
-      if (isset($tokens[$token])) {
-        unset($tokens[$token]);
-      }
-    }
-
-    $this->tokens = $tokens;
-  }
-
-  /**
-   * Restore out of band data saved to cache.
-   */
-  function restore() {
-    if (!empty($this->head)) {
-      drupal_add_html_head($this->head);
-    }
-    if (!empty($this->css)) {
-      foreach ($this->css as $args) {
-        drupal_add_css($args['data'], $args);
-      }
-    }
-    if (!empty($this->js)) {
-      foreach ($this->js as $key => $args) {
-        if ($key !== 'settings') {
-          drupal_add_js($args['data'], $args);
-        }
-        else {
-          foreach ($args['data'] as $setting) {
-            drupal_add_js($setting, 'setting');
-          }
-        }
-      }
-    }
-
-    if (!empty($this->tokens)) {
-      foreach ($this->tokens as $token => $key) {
-        list($type, $argument) = $key;
-        ctools_set_page_token($token, $type, $argument);
-      }
-    }
-  }
-
-}
-
-/**
- * Get the title of a pane.
- *
- * @deprecated @todo this function should be removed.
- *
- * @param $pane
- *   The $pane object.
- */
-function panels_get_pane_title(&$pane, $context = array(), $incoming_content = NULL) {
-  ctools_include('content');
-  return ctools_content_admin_title($pane->type, $pane->subtype, $pane->configuration, $context);
-}
-
-/**
- * Fetch metadata on a specific layout plugin.
- *
- * @param $layout
- *   Name of a panel layout. If the layout name contains a ':' this
- *   indicates that we need to separate the sublayout out and
- *   load it individually.
- *
- * @return
- *   An array with information about the requested panel layout.
- */
-function panels_get_layout($layout) {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'layouts', $layout);
-}
-
-/**
- * Fetch metadata for all layout plugins.
- *
- * @return
- *   An array of arrays with information about all available panel layouts.
- */
-function panels_get_layouts() {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'layouts');
-}
-
-/**
- * Fetch metadata for all layout plugins that provide builders.
- *
- * The layout builders allow reusable layouts be stored in the database and
- * exported. Since there are different methods, we are not limiting this
- * to just one plugin.
- *
- * @return
- *   An array of arrays with information about panel layouts with builders.
- */
-function panels_get_layout_builders() {
-  ctools_include('plugins');
-  $plugins = ctools_get_plugins('panels', 'layouts');
-  $builders = array();
-  foreach ($plugins as $name => $plugin) {
-    if (!empty($plugin['builder'])) {
-      $builders[$name] = $plugin;
-    }
-  }
-
-  return $builders;
-}
-
-/**
- * Fetch metadata on a specific style plugin.
- *
- * @param $style
- *   Name of a panel style.
- *
- * @return
- *   An array with information about the requested panel style.
- */
-function panels_get_style($style) {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'styles', $style);
-}
-
-/**
- * Fetch metadata for all style plugins.
- *
- * @return
- *   An array of arrays with information about all available panel styles.
- */
-function panels_get_styles() {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'styles');
-}
-
-/**
- * Fetch metadata on a specific caching plugin.
- *
- * @param $cache
- *   Name of a panel cache.
- *
- * @return
- *   An array with information about the requested panel cache.
- */
-function panels_get_cache($cache) {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'cache', $cache);
-}
-
-/**
- * Fetch metadata for all context plugins.
- *
- * @return
- *   An array of arrays with information about all available panel caches.
- */
-function panels_get_caches() {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'cache');
-}
-
-/**
- * Fetch metadata on a specific display renderer plugin.
- *
- * @return
- *   An array of arrays with information about the requested panels display
- *   renderer.
- */
-function panels_get_display_renderer($renderer) {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'display_renderers', $renderer);
-}
-
-/**
- * Fetch metadata for all display renderer plugins.
- *
- * @return
- *   An array of arrays with information about all available panels display
- *   renderer.
- */
-function panels_get_display_renderers() {
-  ctools_include('plugins');
-  return ctools_get_plugins('panels', 'display_renderers');
-}
-
-/**
- * Get and initialize the class to handle rendering a display.
- *
- * @return
- *   Either the instantiated renderer or FALSE if one could not be found.
- */
-function panels_get_renderer_handler($plugin, &$display) {
-  if (is_string($plugin)) {
-    $plugin = panels_get_display_renderer($plugin);
-  }
-
-  $class = ctools_plugin_get_class($plugin, 'renderer');
-  if ($class) {
-    $renderer = new $class();
-    $renderer->init($plugin, $display);
-    return $renderer;
-  }
-
-  return FALSE;
-}
-
-/**
- * Choose a renderer for a display based on a render pipeline setting.
- */
-function panels_get_renderer($pipeline_name, &$display) {
-  // Load the pipeline.
-  ctools_include('export');
-  $pipeline = ctools_export_crud_load('panels_renderer_pipeline', $pipeline_name);
-
-  // If we can't, or it has no renderers, default.
-  if (!$pipeline || empty($pipeline->settings['renderers'])) {
-    return panels_get_renderer_handler('standard', $display);
-  }
-
-  // Get contexts set on the pipeline:
-  $contexts = array();
-  if (!empty($pipeline->settings['contexts'])) {
-    $contexts = ctools_context_load_contexts($pipeline->settings['context']);
-  }
-
-  // Cycle through our renderers and see.
-  foreach ($pipeline->settings['renderers'] as $candidate) {
-    // See if this passes selection criteria.
-    if (!ctools_access($candidate['access'], $contexts)) {
-      continue;
-    }
-
-    $renderer = panels_get_renderer_handler($candidate['renderer'], $display);
-
-    if (!empty($candidate['options'])) {
-      $renderer->set_options($candidate['options']);
-    }
-
-    return $renderer;
-  }
-
-  // Fall through. If no renderer is selected, use the standard renderer.
-  return panels_get_renderer_handler('standard', $display);
-}
-
-/**
- * Sort callback for sorting renderer pipelines.
- *
- * Sort first by weight, then by title.
- */
-function _panels_renderer_pipeline_sort($a, $b) {
-  if ($a->weight == $b->weight) {
-    if ($a->admin_title == $b->admin_title) {
-      return 0;
-    }
-    return ($a->admin_title < $b->admin_title) ? -1 : 1;
-  }
-  return ($a->weight < $b->weight) ? -1 : 1;
-}
-
-/**
- * Get a list of available renderer pipelines.
- *
- * This can be used to form a select or radios widget by enabling
- * sorting. Descriptions are left in.
- */
-function panels_get_renderer_pipelines($sort = TRUE) {
-  ctools_include('export');
-  $pipelines = ctools_export_crud_load_all('panels_renderer_pipeline');
-  if ($sort) {
-    uasort($pipelines, '_panels_renderer_pipeline_sort');
-  }
-
-  return $pipelines;
-}
-
-/**
- * Get a function from a plugin, if it exists.
- *
- * @param $plugin
- *   The type of plugin
- * @param $which
- *   Either the loaded plugin object (or the same data in array form)
- *   or a string with the name of the desired the specific plugin.
- * @param $function_name
- *   The identifier of the function. For example, 'settings form'.
- *
- * @return
- *   The actual name of the function to call, or NULL if the function
- *   does not exist.
- *
- * @deprecated All calls to this function should be removed.
- */
-function panels_plugin_get_function($plugin, $which, $function_name) {
-  ctools_include('plugins');
-  if (is_object($which) || is_array($which)) {
-    return ctools_plugin_get_function($which, $function_name);
-  }
-  else {
-    return ctools_plugin_load_function('panels', $plugin, $which, $function_name);
-  }
-}
diff --git a/panels_mini/panels_mini.info b/panels_mini/panels_mini.info
deleted file mode 100644
index 01cb4f5..0000000
--- a/panels_mini/panels_mini.info
+++ /dev/null
@@ -1,6 +0,0 @@
-name = Mini panels
-description = Create mini panels that can be used as blocks by Drupal and panes by other panel modules.
-package = "Panels"
-dependencies[] = panels
-core = 7.x
-files[] = plugins/export_ui/panels_mini_ui.class.php
diff --git a/panels_mini/panels_mini.install b/panels_mini/panels_mini.install
deleted file mode 100644
index 1fde9fa..0000000
--- a/panels_mini/panels_mini.install
+++ /dev/null
@@ -1,128 +0,0 @@
-<?php
-
-/**
- * @file
- */
-
-/**
- * Implementation of hook_schema().
- */
-function panels_mini_schema() {
-  // This should always point to our 'current' schema. This makes it relatively easy
-  // to keep a record of schema as we make changes to it.
-  return panels_mini_schema_1();
-}
-
-/**
- * Schema version 1 for Panels in D6.
- */
-function panels_mini_schema_1() {
-  $schema = array();
-
-  $schema['panels_mini'] = array(
-    'export' => array(
-      'identifier' => 'mini',
-      'load callback' => 'panels_mini_load',
-      'load all callback' => 'panels_mini_load_all',
-      'save callback' => 'panels_mini_save',
-      'delete callback' => 'panels_mini_delete',
-      'export callback' => 'panels_mini_export',
-      'api' => array(
-        'owner' => 'panels_mini',
-        'api' => 'panels_default',
-        'minimum_version' => 1,
-        'current_version' => 1,
-      ),
-    ),
-    'fields' => array(
-      'pid' => array(
-        'type' => 'serial',
-        'not null' => TRUE,
-        'no export' => TRUE,
-        'description' => 'The primary key for uniqueness.',
-      ),
-      'name' => array(
-        'type' => 'varchar',
-        'length' => '255',
-        'description' => 'The unique name of the mini panel.',
-      ),
-      'category' => array(
-        'type' => 'varchar',
-        'length' => '64',
-        'description' => 'The category this mini panel appears in on the add content pane.',
-      ),
-      'did' => array(
-        'type' => 'int',
-        'no export' => TRUE,
-        'description' => 'The display ID of the panel.',
-      ),
-      'admin_title' => array(
-        'type' => 'varchar',
-        'length' => '128',
-        'description' => 'The administrative title of the mini panel.',
-      ),
-      'admin_description' => array(
-        'type' => 'text',
-        'size' => 'big',
-        'description' => 'Administrative title of this mini panel.',
-        'object default' => '',
-      ),
-      'requiredcontexts' => array(
-        'type' => 'text',
-        'size' => 'big',
-        'serialize' => TRUE,
-        'object default' => array(),
-        'description' => 'An array of required contexts.',
-      ),
-      'contexts' => array(
-        'type' => 'text',
-        'size' => 'big',
-        'serialize' => TRUE,
-        'object default' => array(),
-        'description' => 'An array of contexts embedded into the panel.',
-      ),
-      'relationships' => array(
-        'type' => 'text',
-        'size' => 'big',
-        'serialize' => TRUE,
-        'object default' => array(),
-        'description' => 'An array of relationships embedded into the panel.',
-      ),
-    ),
-    'primary key' => array('pid'),
-    'unique keys' => array(
-      'name' => array('name'),
-    ),
-  );
-
-  return $schema;
-}
-
-/**
- * Implementation of hook_uninstall().
- */
-function panels_mini_uninstall() {
-  $panels_exists = db_table_exists('panels_display');
-
-  $result = db_query("SELECT * FROM {panels_mini}");
-  $deltas = array();
-  foreach ($result as $panel_mini) {
-    // Delete all associated displays.
-    if (!function_exists('panels_delete_display')) {
-      require_once drupal_get_path('module', 'panels') . '/panels.module';
-    }
-    if ($panels_exists) {
-      panels_delete_display($panel_mini->did);
-    }
-
-    $deltas[] = $panel_mini->pid;
-  }
-
-  if ($deltas) {
-    // Delete all configured blocks.
-    db_delete('block')
-      ->condition('module', 'panels_mini')
-      ->condition('delta', $deltas)
-      ->execute();
-  }
-}
diff --git a/panels_mini/panels_mini.module b/panels_mini/panels_mini.module
deleted file mode 100644
index bb2a499..0000000
--- a/panels_mini/panels_mini.module
+++ /dev/null
@@ -1,518 +0,0 @@
-<?php
-
-/**
- * @file panels_mini.module
- *
- * This module provides mini panels which are basically panels that can be
- * used within blocks or other panels.
- */
-
-/**
- * Implementation of hook_permission().
- */
-function panels_mini_permission() {
-  return array(
-    'create mini panels' => array(
-      'title' => t('Create mini panels'),
-      'description' => t('Create new mini panels'),
-    ),
-    'administer mini panels' => array(
-      'title' => t('Administer mini panels'),
-      'description' => t('Edit and delete mini panels'),
-    ),
-  );
-}
-
-/**
- * Implementation of hook_menu().
- */
-function panels_mini_menu() {
-  // Safety: go away if CTools is not at an appropriate version.
-  if (!defined('PANELS_REQUIRED_CTOOLS_API') || !module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
-    return array();
-  }
-
-  $items['admin/structure/mini-panels/settings'] = array(
-    'title' => 'Settings',
-    'page callback' => 'panels_mini_settings',
-    'access arguments' => array('create mini panels'),
-    'type' => MENU_LOCAL_TASK,
-  );
-
-  // Also provide settings on the main panel UI.
-  $items['admin/structure/panels/settings/panels-mini'] = array(
-    'title' => 'Mini panels',
-    'page callback' => 'panels_mini_settings',
-    'access arguments' => array('create mini panels'),
-    'type' => MENU_LOCAL_TASK,
-  );
-
-  return $items;
-}
-
-/**
- * Settings for mini panels.
- */
-function panels_mini_settings() {
-  ctools_include('common', 'panels');
-  return drupal_get_form('panels_common_settings', 'panels_mini');
-}
-
-// ---------------------------------------------------------------------------
-// Allow the rest of the system access to mini panels.
-/**
- * Implementation of hook_block_info().
- */
-function panels_mini_block_info() {
-  // Safety: go away if CTools is not at an appropriate version.
-  if (!defined('PANELS_REQUIRED_CTOOLS_API') || !module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
-    return array();
-  }
-
-  $blocks = array();
-
-  $minis = panels_mini_load_all();
-  foreach ($minis as $panel_mini) {
-    if (empty($panel_mini->disabled) && (module_exists('page_manager') || empty($panel_mini->requiredcontexts))) {
-      $blocks[$panel_mini->name] = array(
-        'info' => t('Mini panel: "@title"', array('@title' => $panel_mini->admin_title)),
-        'cache' => DRUPAL_NO_CACHE,
-      );
-    }
-  }
-
-  return $blocks;
-}
-
-/**
- * Implementation of hook_block_view().
- *
- * @see panels_mini_panels_mini_content_type_render().
- */
-function panels_mini_block_view($delta = 0) {
-  // Static recursion protection.
-  static $viewing = array();
-  if (!empty($viewing[$delta])) {
-    return;
-  }
-  $viewing[$delta] = TRUE;
-
-  $panel_mini = panels_mini_load($delta);
-  if (empty($panel_mini)) {
-    // Bail out early if the specified mini panel doesn't exist.
-    return;
-  }
-
-  ctools_include('context');
-
-  $contexts = array();
-  if (module_exists('page_manager') && $current_page = page_manager_get_current_page()) {
-    if (!empty($current_page['contexts'])) {
-      $contexts = ctools_context_match_required_contexts($panel_mini->requiredcontexts, $current_page['contexts']);
-    }
-  }
-
-  $panel_mini->context = $panel_mini->display->context = ctools_context_load_contexts($panel_mini, FALSE, $contexts);
-  $panel_mini->display->css_id = panels_mini_get_id($panel_mini->name);
-
-  $block = array();
-
-  $block['content'] = panels_render_display($panel_mini->display);
-  $block['subject'] = $panel_mini->display->get_title();
-
-  unset($viewing[$delta]);
-  return $block;
-}
-
-/**
- * Implementation of hook_block_configure().
- */
-function panels_mini_block_configure($delta = 0) {
-  return array(
-    'admin_shortcut' => array(
-      '#markup' => l(t('Manage this mini-panel'), 'admin/structure/mini-panels/list/' . $delta . '/edit'),
-    ),
-  );
-}
-
-/**
- * Implements hook_block_list_alter().
- *
- * Remove the block if the required contexts are not available.
- */
-function panels_mini_block_list_alter(&$blocks) {
-  if (module_exists('page_manager')) {
-    $current_page = page_manager_get_current_page();
-  }
-  foreach ($blocks as $key => $block) {
-    if ($block->module != 'panels_mini') {
-      // This block was added by a contrib module, leave it in the list.
-      continue;
-    }
-
-    $panel_mini = panels_mini_load($block->delta);
-    if (empty($panel_mini)) {
-      // Bail out early if the specified mini panel doesn't exist.
-      unset($blocks[$key]);
-      continue;
-    }
-
-    if (!empty($panel_mini->requiredcontexts)) {
-      if (!$current_page || empty($current_page['contexts'])) {
-        unset($blocks[$key]);
-        continue;
-      }
-      else {
-        $required = array();
-        foreach ($panel_mini->requiredcontexts as $context) {
-          $info = ctools_get_context($context['name']);
-          $required[] = new ctools_context_required($context['identifier'], $info['context name']);
-        }
-        if (!ctools_context_match_requirements($current_page['contexts'], $required)) {
-          unset($blocks[$key]);
-          continue;
-        }
-      }
-    }
-  }
-}
-
-/**
- * Implements hook_get_pane_links_alter().
- */
-function panels_mini_get_pane_links_alter(&$links, $pane, $content_type) {
-  if ($pane->type == 'panels_mini') {
-    $links['top']['edit_panels_mini'] = array(
-      'title' => t('Edit mini panel'),
-      'href' => url('admin/structure/mini-panels/list/' . $pane->subtype . '/edit/content', array('absolute' => TRUE)),
-      'attributes' => array('target' => array('_blank')),
-    );
-  }
-}
-
-/**
- * Implements hook_contextual_links_view_alter().
- */
-function panels_mini_contextual_links_view_alter(&$element, $items) {
-
-  // Add contextual links to all mini panel blocks with bid property.
-  if (isset($element['#element']['#block']) && isset($element['#element']['#block']->bid) && strpos((string) $element['#element']['#block']->bid, 'panels_mini') === 0) {
-
-    $admin_pages = array(
-      t('Configure mini panel settings') => 'basic',
-      t('Configure mini panel context') => 'context',
-      t('Configure mini panel layout') => 'layout',
-      t('Configure mini panel content') => 'content',
-    );
-
-    foreach ($admin_pages as $title => $tail) {
-      $element['#links']['mini-panels-' . $tail] = array(
-        'title' => $title,
-        'href' => 'admin/structure/mini-panels/list/' . $element['#element']['#block']->delta . '/edit/' . $tail,
-        'query' => drupal_get_destination(),
-      );
-    }
-  }
-}
-
-/**
- * Statically store all used IDs to ensure all mini panels get a unique id.
- */
-function panels_mini_get_id($name) {
-  $id_cache = &drupal_static(__FUNCTION__, array());
-
-  $id = 'mini-panel-' . $name;
-  if (!empty($id_cache[$name])) {
-    $id .= "-" . $id_cache[$name]++;
-  }
-  else {
-    $id_cache[$name] = 1;
-  }
-
-  return $id;
-}
-
-// ---------------------------------------------------------------------------
-// Database functions.
-/**
- * Create a new page with defaults appropriately set from schema.
- */
-function panels_mini_new($set_defaults = TRUE) {
-  ctools_include('export');
-  return ctools_export_new_object('panels_mini', $set_defaults);
-}
-
-/**
- * Load a single mini panel.
- */
-function panels_mini_load($name) {
-  $cache = &drupal_static('panels_mini_load_all', array());
-
-  // We use array_key_exists because failed loads will be NULL and
-  // isset() will try to load it again.
-  if (!array_key_exists($name, $cache)) {
-    ctools_include('export');
-    $result = ctools_export_load_object('panels_mini', 'names', array($name));
-    if (isset($result[$name])) {
-      if (empty($result[$name]->display)) {
-        $result[$name]->display = panels_load_display($result[$name]->did);
-        if (!empty($result[$name]->title) && empty($result[$name]->display->title)) {
-          $result[$name]->display->title = $result[$name]->title;
-        }
-      }
-      $cache[$name] = $result[$name];
-      if (!empty($result[$name]->title) && empty($result[$name]->admin_title)) {
-        $cache[$name]->admin_title = $result[$name]->title;
-      }
-    }
-    else {
-      $cache[$name] = NULL;
-    }
-  }
-
-  if (isset($cache[$name])) {
-    return $cache[$name];
-  }
-}
-
-/**
- * Load all mini panels.
- */
-function panels_mini_load_all($reset = FALSE) {
-  $cache = &drupal_static('panels_mini_load_all', array());
-  static $all_loaded = FALSE;
-
-  // We check our own private static because individual minis could have
-  // been loaded prior to load all and we need to know that.
-  if (!$all_loaded || $reset) {
-    $all_loaded = TRUE;
-    if ($reset) {
-      $cache = array();
-    }
-
-    ctools_include('export');
-    $minis = ctools_export_load_object('panels_mini');
-    $dids = array();
-    foreach ($minis as $mini) {
-      if (empty($cache[$mini->name])) {
-        if (!empty($mini->did)) {
-          $dids[$mini->did] = $mini->name;
-        }
-        else {
-          // Translate old style titles into new titles.
-          if (!empty($mini->title) && empty($mini->display->title)) {
-            $mini->display->title = $mini->title;
-          }
-        }
-        // Translate old style titles into new titles.
-        if (isset($mini->title) && empty($mini->admin_title)) {
-          $mini->admin_title = $mini->title;
-        }
-        $cache[$mini->name] = $mini;
-      }
-    }
-
-    $displays = panels_load_displays(array_keys($dids));
-    foreach ($displays as $did => $display) {
-      if (!empty($cache[$dids[$did]]->title) && empty($display->title)) {
-        $display->title = $cache[$dids[$did]]->title;
-      }
-      $cache[$dids[$did]]->display = $display;
-    }
-  }
-
-  // Strip out NULL entries that may have been added by panels_mini_load().
-  return array_filter($cache);
-}
-
-/**
- * Write a mini panel to the database.
- */
-function panels_mini_save(&$mini) {
-  if (!empty($mini->display)) {
-    $display = panels_save_display($mini->display);
-    $mini->did = $display->did;
-  }
-
-  $update = (isset($mini->pid) && $mini->pid != 'new') ? array('pid') : array();
-  drupal_write_record('panels_mini', $mini, $update);
-
-  return $mini;
-}
-
-/**
- * Remove a mini panel.
- */
-function panels_mini_delete($mini) {
-  db_delete('panels_mini')
-    ->condition('name', $mini->name)
-    ->execute();
-
-  if (db_table_exists('block') && $mini->type != t('Overridden')) {
-    // Also remove from block table as long as there isn't a default that may appear.
-    db_delete('block')
-      ->condition('delta', $mini->name)
-      ->condition('module', 'panels_mini')
-      ->execute();
-  }
-  return panels_delete_display($mini->did);
-}
-
-/**
- * Export a mini panel.
- */
-function panels_mini_export($mini, $indent = '') {
-  ctools_include('export');
-  $output = ctools_export_object('panels_mini', $mini, $indent);
-  // Export the primary display.
-  $display = !empty($mini->display) ? $mini->display : panels_load_display($mini->did);
-  $output .= panels_export_display($display, $indent);
-  $output .= $indent . '$mini->display = $display' . ";\n";
-  return $output;
-}
-
-/**
- * Remove the block version of mini panels from being available content types.
- */
-function panels_mini_ctools_block_info($module, $delta, &$info) {
-  $info = NULL;
-}
-
-/**
- * Implementation of hook_ctools_plugin_directory() to let the system know
- * we implement task and task_handler plugins.
- */
-function panels_mini_ctools_plugin_directory($module, $plugin) {
-  if ($module == 'ctools' && ($plugin == 'content_types' || $plugin == 'export_ui')) {
-    return 'plugins/' . $plugin;
-  }
-}
-
-/**
- * Get the display cache for the panels_mini plugin.
- */
-function _panels_mini_panels_cache_get($key) {
-  ctools_include('export-ui');
-  $plugin = ctools_get_export_ui('panels_mini');
-  $handler = ctools_export_ui_get_handler($plugin);
-  if (!$handler) {
-    return;
-  }
-
-  $item = $handler->edit_cache_get($key);
-  if (!$item) {
-    $item = ctools_export_crud_load($handler->plugin['schema'], $key);
-  }
-
-  return array($handler, $item);
-}
-
-/**
- * Get display edit cache for the panels mini export UI.
- *
- * The key is the second half of the key in this form:
- * panels_mini:TASK_NAME:HANDLER_NAME;
- */
-function panels_mini_panels_cache_get($key) {
-  ctools_include('common', 'panels');
-  list($handler, $item) = _panels_mini_panels_cache_get($key);
-  if (isset($item->mini_panels_display_cache)) {
-    return $item->mini_panels_display_cache;
-  }
-
-  $cache = new stdClass();
-  $cache->display = $item->display;
-  $cache->display->context = ctools_context_load_contexts($item);
-  $cache->display->cache_key = 'panels_mini:' . $key;
-  $cache->content_types = panels_common_get_allowed_types('panels_mini', $cache->display->context);
-  $cache->display_title = TRUE;
-
-  // @TODO support locking
-  $cache->locked = FALSE;
-
-  return $cache;
-}
-
-/**
- * Store a display edit in progress in the page cache.
- */
-function panels_mini_panels_cache_set($key, $cache) {
-  list($handler, $item) = _panels_mini_panels_cache_get($key);
-  $item->mini_panels_display_cache = $cache;
-  $handler->edit_cache_set_key($item, $key);
-}
-
-/**
- * Save all changes made to a display using the panels mini UI cache.
- */
-function panels_mini_panels_cache_clear($key, $cache) {
-  list($handler, $item) = _panels_mini_panels_cache_get($key);
-  $handler->edit_cache_clear($item);
-}
-
-/**
- * Save all changes made to a display using the panels mini UI cache.
- */
-function panels_mini_panels_cache_save($key, $cache) {
-  list($handler, $item) = _panels_mini_panels_cache_get($key);
-  $item->display = $cache->display;
-  panels_mini_save($item);
-
-  $handler->edit_cache_clear($item);
-}
-
-/**
- * Break the lock on a panels mini page.
- */
-function panels_mini_panels_cache_break_lock($key, $cache) {
-}
-
-/**
- * Implementation of hook_panels_dashboard_blocks().
- *
- * Adds mini panels information to the Panels dashboard.
- */
-function panels_mini_panels_dashboard_blocks(&$vars) {
-  $vars['links']['panels_mini'] = array(
-    'title' => l(t('Mini panel'), 'admin/structure/mini-panels/add'),
-    'description' => t('Mini panels are small content areas exposed as blocks, for when you need to have complex block layouts or layouts within layouts.'),
-    'weight' => -1,
-  );
-
-  // Load all mini panels and their displays.
-  $panel_minis = panels_mini_load_all();
-  $count = 0;
-  $rows = array();
-
-  foreach ($panel_minis as $panel_mini) {
-    $rows[] = array(
-      check_plain($panel_mini->admin_title),
-      array(
-        'data' => l(t('Edit'), "admin/structure/mini-panels/list/$panel_mini->name/edit"),
-        'class' => 'links',
-      ),
-    );
-
-    // Only show 10.
-    if (++$count >= 10) {
-      break;
-    }
-  }
-
-  if ($rows) {
-    $content = theme('table', array('rows' => $rows, 'attributes' => array('class' => 'panels-manage')));
-  }
-  else {
-    $content = '<p>' . t('There are no mini panels.') . '</p>';
-  }
-
-  $vars['blocks']['panels_mini'] = array(
-    'weight' => -100,
-    'title' => t('Manage mini panels'),
-    'link' => l(t('Go to list'), 'admin/structure/mini-panels'),
-    'content' => $content,
-    'class' => 'dashboard-mini-panels',
-    'section' => 'left',
-  );
-
-}
diff --git a/panels_mini/plugins/content_types/icon_panels_mini.png b/panels_mini/plugins/content_types/icon_panels_mini.png
deleted file mode 100644
index 6d0891b03d97142074cabbe5ed47175ad01c838e..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 450
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbKJOS+@4BLl;=8&~`zjDUQ}64!{5
z;QX|b^2DN42FH~Aq*MjZ+{E<Mpwz^a%EFVWHb6yz0X`wFC3RjgsV;BcJoxhEy{VOs
zt+Ua!D@$K~n{?;ax_h@*|N8mu)welk&rEys_KA0}<>$}O7c9$t{cX{ny-ja_Z2a(J
z>(}2WKK$JM_WP<&zYhNY{~u^-oa}-PKuWqK$S)Wuf&(z9n{b-~m0j?3aSW-rl{Dee
zlZ3|)1(}!_6(&q#;!t4o6Jcc2Y+y)wFhPWsnNwiGloSS_sF|lkI1k4T2}Y)lMt31K
zT{R`8Ge<cD91<8iY$oWR12K7=CM`<1>acFZ4hwO42L?k9!^K<-ECK-xYoyPJiadGF
z%%Q-;2sBuLfxBUcgPpm(wgW>WOG8Z|$NbsTMHLz(Sav8dH96Q>TMKi8w14>A?Rd3#
zv$5eupefBF%=Q8wniz$J=L-NOJv<E!42(W8GHPpccTW&;XkcWRWF*M;&3w{spx+og
MUHx3vIVCg!05FTNRsaA1

diff --git a/panels_mini/plugins/content_types/panels_mini.inc b/panels_mini/plugins/content_types/panels_mini.inc
deleted file mode 100644
index bf10348..0000000
--- a/panels_mini/plugins/content_types/panels_mini.inc
+++ /dev/null
@@ -1,175 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains the content type plugin for a mini panel. While this does not
- * need to be broken out into a .inc file, it's convenient that we do so
- * that we don't load code unneccessarily. Plus it demonstrates plugins
- * in modules other than Panels itself.
- */
-
-/**
- * Specially named hook. for .inc file. This looks a little silly due to the
- * redundancy, but that's really just because the content type shares a
- * name with the module.
- */
-function panels_mini_panels_mini_ctools_content_types() {
-  return array(
-    'title' => t('Mini panels'),
-    'content type' => 'panels_mini_panels_mini_content_type_content_type',
-  );
-}
-
-/**
- * Return each available mini panel available as a subtype.
- */
-function panels_mini_panels_mini_content_type_content_type($subtype_id, $plugin) {
-  $mini = panels_mini_load($subtype_id);
-  return _panels_mini_panels_mini_content_type_content_type($mini);
-}
-
-/**
- * Return each available mini panel available as a subtype.
- */
-function panels_mini_panels_mini_content_type_content_types($plugin) {
-  $types = array();
-  foreach (panels_mini_load_all() as $mini) {
-    $type = _panels_mini_panels_mini_content_type_content_type($mini);
-    if ($type) {
-      $types[$mini->name] = $type;
-    }
-  }
-  return $types;
-}
-
-/**
- * Return an info array describing a single mini panel.
- */
-function _panels_mini_panels_mini_content_type_content_type($mini) {
-  if (empty($mini)) {
-    // The mini panel is deleted or missing.
-    return;
-  }
-
-  if (!empty($mini->disabled)) {
-    return;
-  }
-
-  $title = filter_xss_admin($mini->admin_title);
-  $type = array(
-    'title' => $title,
-    // For now mini panels will just use the contrib block icon.
-    'icon' => 'icon_mini_panel.png',
-    'description' => $title,
-    'category' => !empty($mini->category) ? $mini->category : t('Mini panel'),
-  );
-  if (!empty($mini->requiredcontexts)) {
-    $type['required context'] = array();
-    foreach ($mini->requiredcontexts as $context) {
-      $info = ctools_get_context($context['name']);
-      // TODO: allow an optional setting.
-      $type['required context'][] = new ctools_context_required($context['identifier'], $info['context name']);
-    }
-  }
-  return $type;
-}
-
-/**
- * Render a mini panel called from a panels display.
- */
-function panels_mini_panels_mini_content_type_render($subtype, $conf, $panel_args, &$contexts) {
-  static $viewing = array();
-  $mini = panels_mini_load($subtype);
-  if (!$mini) {
-    return FALSE;
-  }
-  if (!empty($viewing[$mini->name])) {
-    return FALSE;
-  }
-
-  // Load up any contexts we might be using.
-  $context = ctools_context_match_required_contexts($mini->requiredcontexts, $contexts);
-  $mini->context = $mini->display->context = ctools_context_load_contexts($mini, FALSE, $context);
-
-  if (empty($mini) || !empty($mini->disabled)) {
-    return;
-  }
-  $viewing[$mini->name] = TRUE;
-
-  $mini->display->args = $panel_args;
-  $mini->display->css_id = panels_mini_get_id($subtype);
-  $mini->display->owner = $mini;
-  // Unique ID of this mini.
-  $mini->display->owner->id = $mini->name;
-
-  $block = new stdClass();
-  $block->module  = 'panels_mini';
-  $block->delta   = $subtype;
-  $block->content = panels_render_display($mini->display);
-  $block->title = $mini->display->get_title();
-
-  if (user_access('administer mini panels')) {
-    $block->admin_links = array(
-      array(
-        'title' => t('Configure mini panel'),
-        'href' => "admin/structure/mini-panels/list/$subtype/edit/content",
-        'query' => drupal_get_destination(),
-      ),
-    );
-  }
-
-  unset($viewing[$mini->name]);
-  return $block;
-}
-
-/**
- * Edit form for the mini panel content type.
- */
-function panels_mini_panels_mini_content_type_edit_form($form, &$form_state) {
-  // Empty form to ensure we have the override title + context gadgets.
-  return $form;
-}
-
-/**
- * Provide the administrative title of a mini panel.
- */
-function panels_mini_panels_mini_content_type_admin_title($subtype, $conf) {
-  $mini = panels_mini_load($subtype);
-  if (!$mini) {
-    return t('Deleted/missing mini panel @name', array('@name' => $subtype));
-  }
-
-  $title = filter_xss_admin($mini->admin_title);
-  if (empty($title)) {
-    $title = t('Untitled mini panel');
-  }
-  return $title;
-}
-
-/**
- * Callback to provide administrative info. Provide links to edit the mini
- * panel.
- */
-function panels_mini_panels_mini_content_type_admin_info($subtype, $conf) {
-  $mini = panels_mini_load($subtype);
-  if (!$mini) {
-    return FALSE;
-  }
-
-  $block = new stdClass();
-  $block->title = $mini->admin_title;
-  $admin_pages = array(
-    t('Settings') => 'basic',
-    t('Context') => 'context',
-    t('Layout') => 'layout',
-    t('Content') => 'content',
-  );
-
-  $links = array();
-  foreach ($admin_pages as $title => $tail) {
-    $links[] = l($title, 'admin/structure/mini-panels/list/' . $subtype . '/edit/' . $tail, array('query' => drupal_get_destination()));
-  }
-
-  $block->content = theme('item_list', array('items' => $links));
-  return $block;
-}
diff --git a/panels_mini/plugins/export_ui/panels_mini.inc b/panels_mini/plugins/export_ui/panels_mini.inc
deleted file mode 100644
index 78e1d84..0000000
--- a/panels_mini/plugins/export_ui/panels_mini.inc
+++ /dev/null
@@ -1,44 +0,0 @@
-<?php
-
-/**
- * @file
- */
-
-$plugin = array(
-  'schema' => 'panels_mini',
-  'access' => 'administer mini panels',
-  'create access' => 'create mini panels',
-
-  'menu' => array(
-    'menu item' => 'mini-panels',
-    'menu title' => 'Mini panels',
-    'menu description' => 'Add, edit or delete mini panels, which can be used as blocks or content panes in other panels.',
-  ),
-
-  'title singular' => t('mini panel'),
-  'title singular proper' => t('Mini panel'),
-  'title plural' => t('mini panels'),
-  'title plural proper' => t('Mini panels'),
-
-  'handler' => array(
-    'class' => 'panels_mini_ui',
-    'parent' => 'ctools_export_ui',
-  ),
-
-  'use wizard' => TRUE,
-  'form info' => array(
-    'order' => array(
-      'basic' => t('Settings'),
-      'context' => t('Context'),
-      'layout' => t('Layout'),
-      'content' => t('Content'),
-    ),
-    // We have to add this form specially because it's invisible.
-    'forms' => array(
-      'move' => array(
-        'form id' => 'ctools_export_ui_edit_item_wizard_form',
-      ),
-    ),
-  ),
-
-);
diff --git a/panels_mini/plugins/export_ui/panels_mini_ui.class.php b/panels_mini/plugins/export_ui/panels_mini_ui.class.php
deleted file mode 100644
index 5b988da..0000000
--- a/panels_mini/plugins/export_ui/panels_mini_ui.class.php
+++ /dev/null
@@ -1,307 +0,0 @@
-<?php
-
-/**
- * @file
- */
-class panels_mini_ui extends ctools_export_ui {
-  function init($plugin) {
-    parent::init($plugin);
-    ctools_include('context');
-  }
-
-  function list_form(&$form, &$form_state) {
-    ctools_include('plugins', 'panels');
-    $this->layouts = panels_get_layouts();
-
-    parent::list_form($form, $form_state);
-
-    $categories = $layouts = array('all' => t('- All -'));
-    foreach ($this->items as $item) {
-      $categories[$item->category] = $item->category ? $item->category : t('Mini panels');
-    }
-
-    $form['top row']['category'] = array(
-      '#type' => 'select',
-      '#title' => t('Category'),
-      '#options' => $categories,
-      '#default_value' => 'all',
-      '#weight' => -10,
-    );
-
-    foreach ($this->layouts as $name => $plugin) {
-      $layouts[$name] = $plugin['title'];
-    }
-
-    $form['top row']['layout'] = array(
-      '#type' => 'select',
-      '#title' => t('Layout'),
-      '#options' => $layouts,
-      '#default_value' => 'all',
-      '#weight' => -9,
-    );
-  }
-
-  function list_filter($form_state, $item) {
-    if ($form_state['values']['category'] != 'all' && $form_state['values']['category'] != $item->category) {
-      return TRUE;
-    }
-
-    if ($form_state['values']['layout'] != 'all' && $form_state['values']['layout'] != $item->display->layout) {
-      return TRUE;
-    }
-
-    return parent::list_filter($form_state, $item);
-  }
-
-  function list_sort_options() {
-    return array(
-      'disabled' => t('Enabled, title'),
-      'title' => t('Title'),
-      'name' => t('Name'),
-      'category' => t('Category'),
-      'storage' => t('Storage'),
-      'layout' => t('Layout'),
-    );
-  }
-
-  function list_build_row($item, &$form_state, $operations) {
-    // Set up sorting.
-    switch ($form_state['values']['order']) {
-      case 'disabled':
-        $this->sorts[$item->name] = empty($item->disabled) . $item->admin_title;
-        break;
-
-      case 'title':
-        $this->sorts[$item->name] = $item->admin_title;
-        break;
-
-      case 'name':
-        $this->sorts[$item->name] = $item->name;
-        break;
-
-      case 'category':
-        $this->sorts[$item->name] = ($item->category ? $item->category : t('Mini panels')) . $item->admin_title;
-        break;
-
-      case 'layout':
-        $this->sorts[$item->name] = $item->display->layout . $item->admin_title;
-        break;
-
-      case 'storage':
-        $this->sorts[$item->name] = $item->type . $item->admin_title;
-        break;
-    }
-
-    $layout = !empty($this->layouts[$item->display->layout]) ? $this->layouts[$item->display->layout]['title'] : t('Missing layout');
-    $category = $item->category ? check_plain($item->category) : t('Mini panels');
-
-    $ops = theme('links__ctools_dropbutton', array('links' => $operations, 'attributes' => array('class' => array('links', 'inline'))));
-
-    $this->rows[$item->name] = array(
-      'data' => array(
-        array('data' => check_plain($item->admin_title), 'class' => array('ctools-export-ui-title')),
-        array('data' => check_plain($item->name), 'class' => array('ctools-export-ui-name')),
-        array('data' => $category, 'class' => array('ctools-export-ui-category')),
-        array('data' => $layout, 'class' => array('ctools-export-ui-layout')),
-        array('data' => $item->type, 'class' => array('ctools-export-ui-storage')),
-        array('data' => $ops, 'class' => array('ctools-export-ui-operations')),
-      ),
-      'title' => !empty($item->admin_description) ? check_plain($item->admin_description) : '',
-      'class' => array(!empty($item->disabled) ? 'ctools-export-ui-disabled' : 'ctools-export-ui-enabled'),
-    );
-  }
-
-  function list_table_header() {
-    return array(
-      array('data' => t('Title'), 'class' => array('ctools-export-ui-title')),
-      array('data' => t('Name'), 'class' => array('ctools-export-ui-name')),
-      array('data' => t('Category'), 'class' => array('ctools-export-ui-category')),
-      array('data' => t('Layout'), 'class' => array('ctools-export-ui-layout')),
-      array('data' => t('Storage'), 'class' => array('ctools-export-ui-storage')),
-      array('data' => t('Operations'), 'class' => array('ctools-export-ui-operations')),
-    );
-  }
-
-  function edit_form(&$form, &$form_state) {
-    // Get the basic edit form.
-    parent::edit_form($form, $form_state);
-
-    // Set the admin title machine name length.
-    // We need to do this because the system block name length is
-    // limited to 32 chars.
-    $form['info']['name']['#maxlength'] = 32;
-    $form['info']['name']['#size'] = 34;
-    $form['info']['name']['#description'] .= ' ' . t('The machine name length is limited to 32 characters, due to a limitation in the core block system.');
-
-    $form['category'] = array(
-      '#type' => 'textfield',
-      '#size' => 24,
-      '#default_value' => $form_state['item']->category,
-      '#title' => t('Category'),
-      '#description' => t("The category that this mini-panel will be grouped into on the Add Content form. Only upper and lower-case alphanumeric characters are allowed. If left blank, defaults to 'Mini panels'."),
-    );
-
-    $form['title']['#title'] = t('Title');
-    $form['title']['#description'] = t('The title for this mini panel. It can be overridden in the block configuration.');
-  }
-
-  /**
-   * Validate submission of the mini panel edit form.
-   */
-  function edit_form_basic_validate($form, &$form_state) {
-    parent::edit_form_validate($form, $form_state);
-    if (preg_match("/[^A-Za-z0-9 ]/", $form_state['values']['category'])) {
-      form_error($form['category'], t('Categories may contain only alphanumerics or spaces.'));
-    }
-  }
-
-  function edit_form_submit(&$form, &$form_state) {
-    parent::edit_form_submit($form, $form_state);
-    $form_state['item']->category = $form_state['values']['category'];
-  }
-
-  function edit_form_context(&$form, &$form_state) {
-    ctools_include('context-admin');
-    ctools_context_admin_includes();
-    ctools_add_css('ruleset');
-
-    $form['right'] = array(
-      '#prefix' => '<div class="ctools-right-container">',
-      '#suffix' => '</div>',
-    );
-
-    $form['left'] = array(
-      '#prefix' => '<div class="ctools-left-container clearfix">',
-      '#suffix' => '</div>',
-    );
-
-    // Set this up and we can use CTools' Export UI's built in wizard caching,
-    // which already has callbacks for the context cache under this name.
-    $module = 'export_ui::' . $this->plugin['name'];
-    $name = $this->edit_cache_get_key($form_state['item'], $form_state['form type']);
-
-    ctools_context_add_context_form($module, $form, $form_state, $form['right']['contexts_table'], $form_state['item'], $name);
-    ctools_context_add_required_context_form($module, $form, $form_state, $form['left']['required_contexts_table'], $form_state['item'], $name);
-    ctools_context_add_relationship_form($module, $form, $form_state, $form['right']['relationships_table'], $form_state['item'], $name);
-  }
-
-  function edit_form_context_submit(&$form, &$form_state) {
-    // Prevent this from going to edit_form_submit();
-  }
-
-  function edit_form_layout(&$form, &$form_state) {
-    ctools_include('common', 'panels');
-    ctools_include('display-layout', 'panels');
-    ctools_include('plugins', 'panels');
-
-    // @todo -- figure out where/how to deal with this.
-    $form_state['allowed_layouts'] = 'panels_mini';
-
-    if ($form_state['op'] == 'add' && empty($form_state['item']->display)) {
-      $form_state['item']->display = panels_new_display();
-    }
-
-    $form_state['display'] = &$form_state['item']->display;
-
-    // Tell the Panels form not to display buttons.
-    $form_state['no buttons'] = TRUE;
-
-    // Change the #id of the form so the CSS applies properly.
-    $form['#id'] = 'panels-choose-layout';
-    $form = panels_choose_layout($form, $form_state);
-
-    if ($form_state['op'] == 'edit') {
-      $form['buttons']['next']['#value'] = t('Change');
-    }
-  }
-
-  /**
-   * Validate that a layout was chosen.
-   */
-  function edit_form_layout_validate(&$form, &$form_state) {
-    $display = &$form_state['display'];
-    if (empty($form_state['values']['layout'])) {
-      form_error($form['layout'], t('You must select a layout.'));
-    }
-    if ($form_state['op'] == 'edit') {
-      if ($form_state['values']['layout'] == $display->layout) {
-        form_error($form['layout'], t('You must select a different layout if you wish to change layouts.'));
-      }
-    }
-  }
-
-  /**
-   * A layout has been selected, set it up.
-   */
-  function edit_form_layout_submit(&$form, &$form_state) {
-    $display = &$form_state['display'];
-    if ($form_state['op'] == 'edit') {
-      if ($form_state['values']['layout'] != $display->layout) {
-        $form_state['item']->temp_layout = $form_state['values']['layout'];
-        $form_state['clicked_button']['#next'] = 'move';
-      }
-    }
-    else {
-      $form_state['item']->display->layout = $form_state['values']['layout'];
-    }
-  }
-
-  /**
-   * When a layout is changed, the user is given the opportunity to move content.
-   */
-  function edit_form_move(&$form, &$form_state) {
-    $form_state['display'] = &$form_state['item']->display;
-    $form_state['layout'] = $form_state['item']->temp_layout;
-
-    ctools_include('common', 'panels');
-    ctools_include('display-layout', 'panels');
-    ctools_include('plugins', 'panels');
-
-    // Tell the Panels form not to display buttons.
-    $form_state['no buttons'] = TRUE;
-
-    // Change the #id of the form so the CSS applies properly.
-    $form = panels_change_layout($form, $form_state);
-
-    // This form is outside the normal wizard list, so we need to specify the
-    // previous/next forms.
-    $form['buttons']['previous']['#next'] = 'layout';
-    $form['buttons']['next']['#next'] = 'content';
-  }
-
-  function edit_form_move_submit(&$form, &$form_state) {
-    panels_change_layout_submit($form, $form_state);
-  }
-
-  function edit_form_content(&$form, &$form_state) {
-    ctools_include('ajax');
-    ctools_include('plugins', 'panels');
-    ctools_include('display-edit', 'panels');
-    ctools_include('context');
-
-    // If we are cloning an item, we MUST have this cached for this to work,
-    // so make sure:
-    if ($form_state['form type'] == 'clone' && empty($form_state['item']->export_ui_item_is_cached)) {
-      $this->edit_cache_set($form_state['item'], 'clone');
-    }
-
-    $cache = panels_edit_cache_get('panels_mini:' . $this->edit_cache_get_key($form_state['item'], $form_state['form type']));
-
-    $form_state['renderer'] = panels_get_renderer_handler('editor', $cache->display);
-    $form_state['renderer']->cache = &$cache;
-
-    $form_state['display'] = &$cache->display;
-    $form_state['content_types'] = $cache->content_types;
-    // Tell the Panels form not to display buttons.
-    $form_state['no buttons'] = TRUE;
-    $form_state['display_title'] = !empty($cache->display_title);
-
-    $form = panels_edit_display_form($form, $form_state);
-  }
-
-  function edit_form_content_submit(&$form, &$form_state) {
-    panels_edit_display_form_submit($form, $form_state);
-    $form_state['item']->display = $form_state['display'];
-  }
-
-}
diff --git a/plugins/style_bases/pane/pane_plain_box/icon.png b/plugins/style_bases/pane/pane_plain_box/icon.png
deleted file mode 100644
index 436355b84cbd1e4206df7f70f40d029f08eb5238..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3022
zcma);<y#c`632fC(j|?Ehc4-qhFv-Z7Fj@)UJ#KGr39DG1Jbz&C>;{AxP;QpQj$wZ
ziGaX8go_e;@!WslzL?MVJI^yS&olFC;_jK~(oo){1OU+J>uH%^sq>#8zjj3e@*44#
zP<ZQEKLdb@@lOze+<Z0wC{5j=(0ljXy!^bLxp{eW=|iDh-o9S0?oV6*2v|T_AYc~T
zEUNhBV~AlaGTqS2oSB@<9Fl-!N)Zs@rl2>7<u00MHtW2htxdu)P#8;`l!Q!VHWQ_e
zr<^0(;4V&zcpDo(bhaA&)?=m(|84ZLX;y8k`UurHM%F=2ov9~dCWoZ1fZV?EHKM<#
zZ*@alBaD*I8_<(CI&(j};3Wd5p(-kOcsj^F0iu8@Dss?aoYx_FD~3R~1Ic+ngp4HW
z@JqRCNRDIz8bL{rQlOzjghXWvSb#zjU_b2SxDM`#0eit$-=+W(b(#}Q1Z>l}nTZNh
z02iZ6tQK%n2GwKt<Fx@?5-_<M_9%imF(9dL<*Enjnn4Gao~i+mQv*q}*eGE@5)AAI
zczFXrWDa1`IkZyw=T0sCmdMqmavD@He2Us(w&Y?yWL8$<w}r6!taq5?9j-a#YKV6Q
z=CDhL$<lp28Udg%h52gRql*A6Z7minpM<7;B)0RJl)&TYxPG}gR^_b$z^Y&9#HFZ2
z<4vS8Dbn+@n17$d?IBg+b9{np1D!?_DBNDKI`aN=8||XknECn5jg2{j9*C{OkX6Vf
zqU%wI)y0!vp(^M2ldqrF_`;;^!gNVazjlor8<pG|OQnc(T>O@-d)`b%IOm+=>Ctz@
zz(ttW%@}-=v~m-Vq)T|>AgRK={F4OdwH47bVzm`HQ1@7kC^$u|+|G&kr=cJ{+^=H|
z55QroSLYWYa$=-g#Ojzo;XwUDw~!woUG-Ca0C=dyCk`8GRPQGTK&voJq)wCLxRXt^
zgY;JC^~FxAb9?zn2wzVZgdRfajJ)M*FI*iC5sDtI;}o%%_@con+hOJwo#ss|-evib
zR@IyCw*z@Wr%+oM1&QVWIimyjLM)MEJe)U)oHZxvl)F=pgdu^CYcQ6{jK?rVPEX1_
z9>!&<$9bsgdrdLsflf<`@&J$yKaXzHl}Zn5FjM_P-2}yyE8L9KDW)2C_LIs@W+}`Y
z_x*5FHBr83YrM*hZXsC>+ArDhosCSU=ZU0vUpJ)wt|&#C({MdcHFZ_r&AR*5#I12B
zPGj}{Bn)BN9Tf5;{tzyQ+nRcCBe=<&UOCq-KG_=!6bcl?k!D?jJZa^I9|T%%{OVzI
zl$MHt>xuHtFeEcd&<DptdldK>;-J!knAg|z>)*j9876fmpPKV-i&o^x>fPi`8(eVq
zXdqKe7v;J$5Ve8Y=-!ao;Mm|kw53EjYWTc6wOA7}A9`%SzDd6+yGiPjEv;$!HrITq
zya;wfF4+cBQ-n5uZx&O|DEmBDaWsNO->{^nIAiLj8><`M{rz{pmK#eMw@tFfttN-J
zb-!nQCqDM4rio^b=#NDRvFEXou_4&~+1_Uxm9kGIu=m3x6{L2vw{qxmye#1&Xpxu9
zDMOSQ1{new93m31iptW;<w`2cBg<h}a>YZ7kXju}8H@D_iZ7W}mX)Y`yA~W4hzjNM
zm`X&s7fk(KsP#o0sdcwew<+|USz-O7^|n4PDkt{F08wranyTpMVRAhJ^`rAIUx>73
zUvRc2s8&`KDMDooWULy^kJ4S$$=0)dPV@atD7J*kvW`OImzfTP*MvDrWsNXWE)P5^
zGqW<`ReDusRl2+F^0j+qsM2=rR_n7cTFrg~!3To6h-B<_)Rx7(#Znn%8H=&1(n+m&
zrAG-zQLC2!=ci@+*#(~-A`6VX%9aD$w|?IWk+^_ec>XRs(WQoyHd6DE;;6A~D!p<(
zUMidt{kVV3pmyCF&=Q9Xhpg4e6wHLm+i9J@b?6e^`yQ<Gt$X%)_PrG#72p;yG~O}Z
z&owv3lnR$B8z~$0kB*EMkIv-C<*7=|N^j+D<;~`;G~3$**odOb(H~v(8#Zi8t@qJw
zPor!UtxMpRHg=6VHK-c?nbw-tvKwU>lQfg6f*C}2-9P9-bVW0J-R2xAt`_Zy4sk#@
zvLc#$YrFT;+S5W>LjJx`C8LR%r>)|&;S7ED!Iw$tzS43oHh*6|r1v;;TLJ+eqaT}-
zSw}Mt3-`FAEb^vw5v&NzvxuYEggC?SVeu?A@jQ;crGfSh1HTg=yVan{6I5PfUe{hZ
z?)|>}zWaX6;+qlKH^K$hGS9}l2cTcgHYe1n-egF6tW<}ZLQTUEO<TMYP7*0rHM4ci
zCH|FohXYo%pK88u*45Tk6qcoztsjjjbTkh%51V#-6+DVsfxhA;I1_>h6QB&qPlO<j
z3)2j<y>@mQ^pg8?lDZPk<!8hEo@QbpMw3}HIlLx(v$KZVZQ#f28gBenHZ}$8P8)SE
z^!v;>nZq}Sgzivk!Kj!ht7!Ek?^yWF38^eO|A|HDvlXr1TA5nQc?c;}#rI+caw2M#
z;*V7p6k23k)ceF;tw*NeD7gL;!&{2tBDL~QpL|+5-#dy~L#<J*2eW2N4A^-G7Gb-N
zqsmw+#2G}DGBu21P41@uN0VNpoF$R}kkOw%i88Q@vkSo^F(E$@I|qFra@*ukPsBJV
z^+!sZTp(YsOo`|wCQ`8Cb(;~5(NdmL0ZZ-+E>CGyrFN-^)RfmgkV<ajG&Eud@y+$c
zaJ5TR!)5Q&gl37`8DxVVjjyY(TZ>VmA*J78HbS!^WDN)xE7#AXaYKrkRRwoO_eL6r
zaIY2e58e>=7`hl%Q_&^ShE`&n@Nezaj};qKd;)Ql>&(~hMBgW^R{0o@7V(@mt=hB7
zsts)y2r~8vd)PS?-q}Rtu}fu1xfvC*yEwaNX9}0FUTJdp9gX5pV~&fjWx}y$F~6D<
zS`66ai18ZwoU@qzp`xk><2>d%>AL-GS**a8HnTG8TNdq8n)!tfG%NQ%?4A77#z|z2
z3gKEK&``|V&nh3=T*?Nqqsr>Acd%pFZ<zf4<WiHv?CH~qeU9L^pRzxuakg#v3$?*d
zI7=c+<7wAvmoxpdM!b4$T;=v@=9#BmjftnvUO(|9@dX(#EqWI7WtwwR6=t41b7xnV
zw*RkBm#71OF&cRq%fIvc)_A?O0ynnt6f5}KG)fCE5`(K($)^5#!HM9Mcnrxs%+<-W
z$UU=lv~4jRQJa|ASq?ha#r;K>FRNl5XmA7@bYIvGpGrd<jwPZpP$8k>zZUIr#pvKI
zC+x~&I<JEkdcW04Z9>A9a+@;t!Qn^0!v@?Yqt!>N-1kb4Ja_zdR4&t|O#55&TXSnM
z4?HmYLG4Y!uJ~<^0tM{SaeLrDEQFcq0!7uO_M;##d@ufFg=Hz!SMUNm+&b?sxL?y|
z+V<#JV^4D)x)d|5ZhN^ncd+>Cafg55(Zr%Io-`_A>@wvfnGSkAIVX8InkIU;;I5jY
z;+nee#rAm_bj*27pn&zV_;R?Gl|>@-bb5CdJCQw6ly#Vu_Sy4g$;D2`F8h02UsvDl
zPlEw6QV);spY3(}FZy#Hyj`I)-FV6MN{Hb0tNz4dyzDHEJuQtuLY#ec?j$3IyZSdt
z5SqrC0MsYFJTptX%DJ5M%#8sE;s*d30l+W9m2Ly@ToQmCdjOQO0bun?eblRSRlBXP
zr3njI__5SZ)6GSXoZ$7{bzhVwV}z$yL&h53C5XNgdb+4}P<1|~ib_hA-J)LFjRG^g
zp0im}q$wpfyIYEO{`U>yu#?jW+sn;-L*Yc8;wJP<Yr$QWv1R3o*g1Sijwsc#J2@4L
zC_Mc7AJ&olOM8kx-oBIJUxxGl@!{7E|0PxCAAeQ$KmMPMs%eJtp~okw#p`#!FQP=}
jt*>VNezSbFC4oQ;)Ps3oG<<{OS1HifHqoku*oXfYKlG8K

diff --git a/plugins/style_bases/pane/pane_plain_box/pane-plain-box.css b/plugins/style_bases/pane/pane_plain_box/pane-plain-box.css
deleted file mode 100644
index 2e34365..0000000
--- a/plugins/style_bases/pane/pane_plain_box/pane-plain-box.css
+++ /dev/null
@@ -1,10 +0,0 @@
-%style {
-  margin-bottom: 10px;
-  color: %text;
-  background-color: %background;
-}
-
-%style h2 {
-  color: %header-text;
-  background-color: %header-background;
-}
diff --git a/plugins/style_bases/pane/pane_plain_box/pane-plain-box.tpl.php b/plugins/style_bases/pane/pane_plain_box/pane-plain-box.tpl.php
deleted file mode 100644
index 73e3cc9..0000000
--- a/plugins/style_bases/pane/pane_plain_box/pane-plain-box.tpl.php
+++ /dev/null
@@ -1,16 +0,0 @@
-<?php
-/**
- * @file
- *
- * Display the box for rounded corners.
- *
- * - $pane: The pane being rendered
- * - $display: The display being rendered
- * - $content: An object containing the content and title
- * - $output: The result of theme('panels_pane')
- * - $classes: The classes that must be applied to the top divs.
- */
-?>
-<div class="<?php print $classes ?>">
-  <?php print $output; ?>
-</div>
diff --git a/plugins/style_bases/pane/pane_plain_box/pane_plain_box.inc b/plugins/style_bases/pane/pane_plain_box/pane_plain_box.inc
deleted file mode 100644
index 4adc4ad..0000000
--- a/plugins/style_bases/pane/pane_plain_box/pane_plain_box.inc
+++ /dev/null
@@ -1,93 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the style base for the rounded shadow box.
- *
- * This box is colorable, has rounded corners and a drop shadow.
- */
-
-$plugin = array(
-  'category' => t('Basic styles'),
-  'title' => t('Plain'),
-  'description' => t('A plain box with an optional border. You may set the color of the text and the border.'),
-  'module' => 'panels',
-  'type' => 'pane',
-
-  'css' => 'pane-plain-box.css',
-  'icon' => 'icon.png',
-
-  'defaults' => array('font' => array(), 'header_font' => array(), 'border' => array(), 'header_border' => array(), 'padding' => array()),
-  'palette' => array(
-    'background' => array(
-      'label' => t('Background'),
-      'default_value' => '#FFFFFF',
-    ),
-    'text' => array(
-      'label' => t('Text'),
-      'default_value' => '#000000',
-    ),
-    'border' => array(
-      'label' => t('Border'),
-      'default_value' => '#000000',
-    ),
-    'header-background' => array(
-      'label' => t('Header background'),
-      'default_value' => '#FFFFFF',
-    ),
-    'header-text' => array(
-      'label' => t('Header text'),
-      'default_value' => '#000000',
-    ),
-    'header-border' => array(
-      'label' => t('Header border'),
-      'default_value' => '#000000',
-    ),
-  ),
-
-  // This just uses theme_panels_pane because all we need is the class.
-//  'theme' => 'pane_plain_box',
-//  'preview' => 'panels_stylizer_pane_preview',
-
-  'settings form' => 'panels_pane_plain_box_style_settings',
-  'settings form submit' => 'panels_pane_plain_box_style_settings_submit',
-  'build' => 'panels_pane_plain_box_style_base_build',
-);
-
-function panels_pane_plain_box_style_settings(&$form, &$form_state) {
-  $form['font'] = array();
-  ctools_stylizer_font_selector_form($form['font'], $form_state, t('Font'), $form_state['settings']['font']);
-
-  $form['border'] = array();
-  ctools_stylizer_border_selector_form($form['border'], $form_state, t('Border'), $form_state['settings']['border']);
-
-  $form['padding'] = array();
-  ctools_stylizer_padding_selector_form($form['padding'], $form_state, t('Padding'), $form_state['settings']['padding']);
-
-  $form['header_font'] = array();
-  ctools_stylizer_font_selector_form($form['header_font'], $form_state, t('Header font'), $form_state['settings']['header_font']);
-
-  $form['header_border'] = array();
-  ctools_stylizer_border_selector_form($form['header_border'], $form_state, t('Header border'), $form_state['settings']['header_border']);
-
-}
-
-function panels_pane_plain_box_style_settings_submit(&$form, &$form_state) {
-  ctools_stylizer_font_selector_form_submit($form['font'], $form_state, $form_state['values']['font'], $form_state['settings']['font']);
-  ctools_stylizer_font_selector_form_submit($form['header_font'], $form_state, $form_state['values']['header_font'], $form_state['settings']['header_font']);
-
-  ctools_stylizer_border_selector_form_submit($form['header_border'], $form_state, $form_state['values']['header_border'], $form_state['settings']['header_border']);
-  ctools_stylizer_border_selector_form_submit($form['border'], $form_state, $form_state['values']['border'], $form_state['settings']['border']);
-
-  ctools_stylizer_padding_selector_form_submit($form['padding'], $form_state, $form_state['values']['padding'], $form_state['settings']['padding']);
-}
-
-function panels_pane_plain_box_style_base_build($plugin, $settings, &$css, $replacements) {
-  ctools_stylizer_font_apply_style($css, '%style', $settings['font']);
-  ctools_stylizer_border_apply_style($css, '%style', $settings['border'], '%border');
-
-  ctools_stylizer_font_apply_style($css, '%style .pane-title', $settings['header_font']);
-  ctools_stylizer_border_apply_style($css, '%style .pane-title', $settings['header_border'], '%header-border', 'bottom');
-
-  ctools_stylizer_padding_apply_style($css, '%style .pane-title, %style .pane-content', $settings['padding']);
-}
diff --git a/plugins/style_bases/pane/pane_rounded_shadow/box-color.png b/plugins/style_bases/pane/pane_rounded_shadow/box-color.png
deleted file mode 100644
index b67fd240cdddbf44d638136b10691d29e3ebf771..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 4772
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

diff --git a/plugins/style_bases/pane/pane_rounded_shadow/box-shadow.png b/plugins/style_bases/pane/pane_rounded_shadow/box-shadow.png
deleted file mode 100644
index 01f385d6c92c49552d61013762c1221a7a0b8fad..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2528
zcmeAS@N?(olHy`uVBq!ia0y~yVEh8Y9Be?5)7S2I0V$SrM_)$<hV>`RS-V~W`I05B
z5hcO-X(i=}MX3yqDfvmM3ZA)%>8U}fi7AzZCsS=07&wbOT^vIyZoRqdn}6F(=0M`b
zvdhb|%OkGejx&67?evDv`~JJ%OqDR&5<Aywo7+K^QvxToEPLj<oo5y}#XVue$A{1N
ztL$F*{x=`Pk4?INI2jx+Ffur@GqA`q2$X;jf)5db^5IH=e1sBeYXMpbv30@3&~AAl
zryU<pKUJ@Na-R2q%uzqRO9Fd+jxX%o{c6Vbwg2>&E_6*_y?~vUy&-zGCC}yamzUp8
zsx^CaoTn<Fh~Y<$d3#))?Dfc)*-39#ZRqE#I-UI@iH||~OZERH9s4_8+pJrD_g~Nt
zB~w$MpEK7s={;jGuze%`^03U;&04P(uZ?<l+L@VQ@?X*G>qC!x*8Fa;ZT;FNIiKeY
z1sA65<5R5Zk>B^m?(WyPdn)Ex8F`{5hU^W8_x8TNE%Iq~UVU!u>|eWNKQr&y$ipz_
zUV(0Hh34%7*}swBUq=0UG5c{8>)jSUhW6;?6Q1wB+rHqr`9ew2uWF9vKV=x+UAg$M
z>gQyUPd0P)cXO8SvVO|Pz<+pERCnH?)7OC^BiHsP?)_<{XEzJ|b}}=RPg_5A`sAI#
z?-)L?vhC%ml(3%5ZN*^o=fvy_j1M-p#{fw|!GVud<fH>iYRG)rB_*7;&@=(#v=w*G
zf~R?CSdd`^g<1wdq@V;3wM!K;f@k0(1tn(;f;3B?NU`v|;QYj&lYzawB(!#={nZw|
z7YqeE*5`5le6e9W*RJ62Kwh}!y{}TTU&9pRs&p70B-|GjyubA7{1hjC#SSY5ACccb
zjpXV)1n)1Ky7*r2+)L4{wLe^+%ZV|}c=Nqv&#ExXmGZex@^v?j>`qraEM#oBc=_k-
ziXVooHNw}AZ&`O~iQTU$zgJzH_bIdKd10~t<B#v{J_Rry=v9<wdv*U&Rd7qq+-s@7
zYHs`Pn08O=MQxRtVNSvhu@Am?-pt?l^1V$CLxJwI^^YI+Upei|^`m{qKi}+FpO=gC
zd$Mg8=3jDaoB!MU&X)}fyAu~1z7v;oV@Q+w7_Rxi{^-}*t}m&ApT8IG^*&zuDs$ci
z_e{%$?=NlcOe{XUvSotV|KjcTqW^W|&R=?e=Kl9K6NWRc@hvv<uf{E3S;O)3_Lstc
z|CUT&w^k~@WVTs^-@D4o&oy88@A~`tn)7qsOokc#u@_I(-2LNhxbS)Z=dYhVzc1Q4
z=fdfR>5cof{4}RH#?QFGIOAr^zST{2H)Hop<`thPsgoD3lKlG1q^7UZ?r9u*>>b96
z9>Mj^^KS3ZJT%YQ?&Y~}zqzVpzy6weB6Zf8(=TI=FwO|R^Lj=8?$_`6uFDI3{>@Rf
z^I?Fit;pm`%Zc4q48=3AoIbc+rjDQQXD!>`WoN&;?wOm$o^UR3{cVev^`X|T7he0e
zWo=I4J1}Q)-SZB4;}`Bf-5CztG3DH~J(s=V@~2~Z3<@t88Wu1!H1RQTSb-3N4-ta!
n5lVo3gc9<!oVixd#KRy`9n$khq;n^*iN@gR>gTe~DWM4fsSE!b

diff --git a/plugins/style_bases/pane/pane_rounded_shadow/icon.png b/plugins/style_bases/pane/pane_rounded_shadow/icon.png
deleted file mode 100644
index c3a45729c0b817e77aa1cb9e843b99b98cfa0da3..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3566
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

diff --git a/plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.css b/plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.css
deleted file mode 100644
index c85e402..0000000
--- a/plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.css
+++ /dev/null
@@ -1,110 +0,0 @@
-/* Show only to IE7 */
-*:first-child+html .rounded-shadow-background,
-/* Show only to IE6 */
-* html .rounded-shadow-background {
-  margin: 0 -10px 0 0 !important;
-  padding: 10px 0 5px 0 !important;
-}
-
-.rounded-shadow-top-edge,
-.rounded-shadow-bottom-edge,
-.rounded-shadow-left-edge,
-.rounded-shadow-right-edge,
-.rounded-shadow-wrap-corner {
-  position: relative;
-  /* hasLayout -1 ? For IE only */
-  zoom: 1;
-}
-%style {
-  padding-top: 10px;
-  margin-bottom: 30px;
-  color: %text;
-}
-
-%style h2 {
-  color: %header-text;
-}
-
-%style .rounded-shadow-background {
-  margin: 10px;
-  background: %background url(rounded-shadow-background.png) repeat;
-}
-
-%style .rounded-shadow-wrap-corner {
-  margin: -10px;
-}
-
-%style .rounded-shadow-top-edge {
-  top: -10px;
-  background: url(rounded-shadow-top-edge.png) repeat-x 0 top;
-  font-size: 1px;
-}
-
-%style .rounded-shadow-bottom-edge {
-  bottom: -10px;
-  background: url(rounded-shadow-bottom-edge.png) repeat-x 0 bottom;
-  font-size: 1px;
-}
-
-%style .rounded-shadow-left-edge {
-  background: url(rounded-shadow-left-edge.png) repeat-y 0 0;
-}
-
-%style .rounded-shadow-right-edge {
-  background: url(rounded-shadow-right-edge.png) repeat-y right 0;
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-top-edge,
-%style .rounded-shadow-wrap-corner .rounded-shadow-bottom-edge {
-  height: 19px;
-  margin: -10px 19px;
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-left,
-%style .rounded-shadow-wrap-corner .rounded-shadow-right {
-  position: absolute;
-  top: 0;
-  height: 19px;
-  width: 19px;
-  margin: 0 -19px;
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-left {
-  background-image: url(rounded-shadow-top-left-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-right {
-  right: 0;
-  background-image: url(rounded-shadow-top-right-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-bottom-edge .rounded-shadow-left {
-  background-image: url(rounded-shadow-bottom-left-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-bottom-edge .rounded-shadow-right {
-  right: 0;
-  background-image: url(rounded-shadow-bottom-right-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-right-edge {
-  padding: 3px 19px;
-}
-
-%style .panel-pane {
-  position: relative;
-  top: -6px;
-}
-
-/*
-%style div.admin-links {
-  margin-top: -19px;
-  margin-left: -12px;
-}
-
-%style .panel-separator {
-  background: url(rounded-shadow-bottom-edge.png) repeat-x 0 center;
-  font-size: 1px;
-  height: 30px;
-}
-*/
diff --git a/plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.tpl.php b/plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.tpl.php
deleted file mode 100644
index 66ffcd6..0000000
--- a/plugins/style_bases/pane/pane_rounded_shadow/pane-rounded-shadow.tpl.php
+++ /dev/null
@@ -1,31 +0,0 @@
-<?php
-/**
- * @file
- *
- * Display the box for rounded corners.
- *
- * - $output: The content of the box.
- * - $classes: The classes that must be applied to the top divs.
- * - $pane: The pane being rendered
- * - $display: The display being rendered
- * - $content: The content being rendered (will be already in $output)
- */
-?>
-<div class="rounded-shadow <?php print $classes ?>">
-  <div class="rounded-shadow-background">
-    <div class="rounded-shadow-wrap-corner">
-      <div class="rounded-shadow-top-edge">
-        <div class="rounded-shadow-left"></div>
-        <div class="rounded-shadow-right"></div>
-      </div>
-      <div class="rounded-shadow-left-edge">
-        <div class="rounded-shadow-right-edge clearfix">
-          <?php print $output; ?>
-        </div>
-      </div>
-      <div class="rounded-shadow-bottom-edge">
-      <div class="rounded-shadow-left"></div><div class="rounded-shadow-right"></div>
-      </div>
-    </div>
-  </div>
-</div>
diff --git a/plugins/style_bases/pane/pane_rounded_shadow/pane_rounded_shadow.inc b/plugins/style_bases/pane/pane_rounded_shadow/pane_rounded_shadow.inc
deleted file mode 100644
index ff582ca..0000000
--- a/plugins/style_bases/pane/pane_rounded_shadow/pane_rounded_shadow.inc
+++ /dev/null
@@ -1,99 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the style base for the rounded shadow box.
- *
- * This box is colorable, has rounded corners and a drop shadow.
- */
-
-$plugin = array(
-  'category' => t('Basic styles'),
-  'title' => t('Rounded shadow box'),
-  'module' => 'panels',
-  'type' => 'pane',
-  'css' => 'pane-rounded-shadow.css',
-  'icon' => 'icon.png',
-  'defaults' => array('header_font' => array(), 'text_font' => array(), 'padding' => array(), 'header_border' => array()),
-  'palette' => array(
-    'background' => array(
-      'label' => t('Background'),
-      'default_value' => '#FFFFFF',
-    ),
-    'text' => array(
-      'label' => t('Text'),
-      'default_value' => '#000000',
-    ),
-    'header-text' => array(
-      'label' => t('Header text'),
-      'default_value' => '#000000',
-    ),
-    'header-border' => array(
-      'label' => t('Header border'),
-      'default_value' => '#000000',
-    ),
-  ),
-  'actions' => array(
-    array('load', 'box', 'box-color.png'),
-    array('colorize', 'background'),
-    array('load', 'shadow', 'box-shadow.png'),
-    array('merge_from', 'box'),
-    array('slice', 'rounded-shadow-top-left-corner.png', 17, 49, 19, 19),
-    array('slice', 'rounded-shadow-top-right-corner.png', 473, 49, 19, 19),
-    array('slice', 'rounded-shadow-bottom-left-corner.png', 17, 442, 19, 19),
-    array('slice', 'rounded-shadow-bottom-right-corner.png', 473, 442, 19, 19),
-    array('slice', 'rounded-shadow-left-edge.png', 17, 60, 10, 10),
-    array('slice', 'rounded-shadow-right-edge.png', 474, 60, 18, 10),
-    array('slice', 'rounded-shadow-top-edge.png', 28, 49, 10, 10),
-    array('slice', 'rounded-shadow-bottom-edge.png', 28, 443, 10, 18),
-    array('slice', 'rounded-shadow-background.png', 150, 150, 1, 1),
-  ),
-
-  'theme' => 'pane_rounded_shadow',
-  'build' => 'panels_rounded_shadow_style_base_build',
-//  'preview' => 'panels_stylizer_pane_preview',
-
-  'settings form' => 'panels_pane_rounded_shadow_style_settings',
-  'settings form submit' => 'panels_pane_rounded_shadow_style_settings_submit',
-  'build' => 'panels_pane_rounded_shadow_style_base_build',
-);
-
-function template_preprocess_pane_rounded_shadow(&$vars) {
-  $vars['classes_array'][] = $vars['content']->css_class;
-  $vars['content']->css_class = '';
-
-  $vars['output'] = theme('panels_pane', $vars);
-}
-
-function panels_pane_rounded_shadow_style_settings(&$form, &$form_state) {
-  $form['header_font'] = array();
-  ctools_stylizer_font_selector_form($form['header_font'], $form_state, t('Header font'), $form_state['settings']['header_font']);
-
-  $form['header_border'] = array();
-  ctools_stylizer_border_selector_form($form['header_border'], $form_state, t('Header border'), $form_state['settings']['header_border']);
-
-  $form['text_font'] = array();
-  ctools_stylizer_font_selector_form($form['text_font'], $form_state, t('Text font'), $form_state['settings']['text_font']);
-
-  $form['padding'] = array();
-  ctools_stylizer_padding_selector_form($form['padding'], $form_state, t('Padding'), $form_state['settings']['padding']);
-}
-
-function panels_pane_rounded_shadow_style_settings_submit(&$form, &$form_state) {
-  ctools_stylizer_font_selector_form_submit($form['header_font'], $form_state, $form_state['values']['header_font'], $form_state['settings']['header_font']);
-
-  ctools_stylizer_font_selector_form_submit($form['text_font'], $form_state, $form_state['values']['text_font'], $form_state['settings']['text_font']);
-
-  ctools_stylizer_padding_selector_form_submit($form['padding'], $form_state, $form_state['values']['padding'], $form_state['settings']['padding']);
-
-  ctools_stylizer_border_selector_form_submit($form['header_border'], $form_state, $form_state['values']['header_border'], $form_state['settings']['header_border']);
-
-}
-
-function panels_pane_rounded_shadow_style_base_build($plugin, $settings, &$css, $replacements) {
-  ctools_stylizer_font_apply_style($css, '%style .pane-title', $settings['header_font']);
-  ctools_stylizer_border_apply_style($css, '%style .pane-title', $settings['header_border'], '%header-border', 'bottom');
-  ctools_stylizer_font_apply_style($css, '%style .pane-content', $settings['text_font']);
-  ctools_stylizer_padding_apply_style($css, '%style', $settings['padding']);
-}
-
diff --git a/plugins/style_bases/region/region_plain_box/icon.png b/plugins/style_bases/region/region_plain_box/icon.png
deleted file mode 100644
index 436355b84cbd1e4206df7f70f40d029f08eb5238..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3022
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

diff --git a/plugins/style_bases/region/region_plain_box/region-plain-box.css b/plugins/style_bases/region/region_plain_box/region-plain-box.css
deleted file mode 100644
index e48b6d5..0000000
--- a/plugins/style_bases/region/region_plain_box/region-plain-box.css
+++ /dev/null
@@ -1,6 +0,0 @@
-%style {
-  padding-top: 10px;
-  margin-bottom: 10px;
-  color: %text;
-  background-color: %background;
-}
diff --git a/plugins/style_bases/region/region_plain_box/region-plain-box.tpl.php b/plugins/style_bases/region/region_plain_box/region-plain-box.tpl.php
deleted file mode 100644
index 840f50a..0000000
--- a/plugins/style_bases/region/region_plain_box/region-plain-box.tpl.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-/**
- * @file
- *
- * Display the box for rounded corners.
- *
- * - $content: The content of the box.
- * - $classes: The classes that must be applied to the top divs.
- */
-?>
-<div class="rounded-shadow <?php print $class ?>">
-  <div class="rounded-shadow-background">
-    <div class="rounded-shadow-wrap-corner">
-      <div class="rounded-shadow-top-edge">
-        <div class="rounded-shadow-left"></div>
-        <div class="rounded-shadow-right"></div>
-      </div>
-      <div class="rounded-shadow-left-edge">
-        <div class="rounded-shadow-right-edge clearfix">
-          <?php print $content; ?>
-        </div>
-      </div>
-      <div class="rounded-shadow-bottom-edge">
-      <div class="rounded-shadow-left"></div><div class="rounded-shadow-right"></div>
-      </div>
-    </div>
-  </div>
-</div>
diff --git a/plugins/style_bases/region/region_plain_box/region_plain_box.inc b/plugins/style_bases/region/region_plain_box/region_plain_box.inc
deleted file mode 100644
index daaf7c8..0000000
--- a/plugins/style_bases/region/region_plain_box/region_plain_box.inc
+++ /dev/null
@@ -1,65 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the style base for the rounded shadow box.
- *
- * This box is colorable, has rounded corners and a drop shadow.
- */
-
-$plugin = array(
-  'category' => t('Basic styles'),
-  'title' => t('Plain'),
-  'description' => t('A plain box with an optional border. You may set the color of the text and the border.'),
-  'module' => 'panels',
-  'type' => 'region',
-
-  'css' => 'region-plain-box.css',
-  'icon' => 'icon.png',
-
-  'defaults' => array('font' => array(), 'border' => array(), 'padding' => array()),
-  'palette' => array(
-    'background' => array(
-      'label' => t('Background'),
-      'default_value' => '#FFFFFF',
-    ),
-    'text' => array(
-      'label' => t('Text'),
-      'default_value' => '#000000',
-    ),
-    'border' => array(
-      'label' => t('Border'),
-      'default_value' => '#000000',
-    ),
-  ),
-
-  'theme' => 'region_plain_box',
-//  'preview' => 'panels_stylizer_region_preview',
-
-  'settings form' => 'panels_region_plain_box_style_settings',
-  'settings form submit' => 'panels_region_plain_box_style_settings_submit',
-  'build' => 'panels_region_plain_box_style_base_build',
-);
-
-function panels_region_plain_box_style_settings(&$form, &$form_state) {
-  $form['font'] = array();
-  ctools_stylizer_font_selector_form($form['font'], $form_state, t('Font'), $form_state['settings']['font']);
-
-  $form['border'] = array();
-  ctools_stylizer_border_selector_form($form['border'], $form_state, t('Border'), $form_state['settings']['border']);
-
-  $form['padding'] = array();
-  ctools_stylizer_padding_selector_form($form['padding'], $form_state, t('Padding'), $form_state['settings']['padding']);
-}
-
-function panels_region_plain_box_style_settings_submit(&$form, &$form_state) {
-  ctools_stylizer_font_selector_form_submit($form['font'], $form_state, $form_state['values']['font'], $form_state['settings']['font']);
-  ctools_stylizer_border_selector_form_submit($form['border'], $form_state, $form_state['values']['border'], $form_state['settings']['border']);
-  ctools_stylizer_padding_selector_form_submit($form['padding'], $form_state, $form_state['values']['padding'], $form_state['settings']['padding']);
-}
-
-function panels_region_plain_box_style_base_build($plugin, $settings, &$css, $replacements) {
-  ctools_stylizer_font_apply_style($css, '%style', $settings['font']);
-  ctools_stylizer_border_apply_style($css, '%style', $settings['border'], '%border');
-  ctools_stylizer_padding_apply_style($css, '%style', $settings['padding']);
-}
diff --git a/plugins/style_bases/region/region_rounded_shadow/box-color.png b/plugins/style_bases/region/region_rounded_shadow/box-color.png
deleted file mode 100644
index b67fd240cdddbf44d638136b10691d29e3ebf771..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 4772
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

diff --git a/plugins/style_bases/region/region_rounded_shadow/box-shadow.png b/plugins/style_bases/region/region_rounded_shadow/box-shadow.png
deleted file mode 100644
index 01f385d6c92c49552d61013762c1221a7a0b8fad..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2528
zcmeAS@N?(olHy`uVBq!ia0y~yVEh8Y9Be?5)7S2I0V$SrM_)$<hV>`RS-V~W`I05B
z5hcO-X(i=}MX3yqDfvmM3ZA)%>8U}fi7AzZCsS=07&wbOT^vIyZoRqdn}6F(=0M`b
zvdhb|%OkGejx&67?evDv`~JJ%OqDR&5<Aywo7+K^QvxToEPLj<oo5y}#XVue$A{1N
ztL$F*{x=`Pk4?INI2jx+Ffur@GqA`q2$X;jf)5db^5IH=e1sBeYXMpbv30@3&~AAl
zryU<pKUJ@Na-R2q%uzqRO9Fd+jxX%o{c6Vbwg2>&E_6*_y?~vUy&-zGCC}yamzUp8
zsx^CaoTn<Fh~Y<$d3#))?Dfc)*-39#ZRqE#I-UI@iH||~OZERH9s4_8+pJrD_g~Nt
zB~w$MpEK7s={;jGuze%`^03U;&04P(uZ?<l+L@VQ@?X*G>qC!x*8Fa;ZT;FNIiKeY
z1sA65<5R5Zk>B^m?(WyPdn)Ex8F`{5hU^W8_x8TNE%Iq~UVU!u>|eWNKQr&y$ipz_
zUV(0Hh34%7*}swBUq=0UG5c{8>)jSUhW6;?6Q1wB+rHqr`9ew2uWF9vKV=x+UAg$M
z>gQyUPd0P)cXO8SvVO|Pz<+pERCnH?)7OC^BiHsP?)_<{XEzJ|b}}=RPg_5A`sAI#
z?-)L?vhC%ml(3%5ZN*^o=fvy_j1M-p#{fw|!GVud<fH>iYRG)rB_*7;&@=(#v=w*G
zf~R?CSdd`^g<1wdq@V;3wM!K;f@k0(1tn(;f;3B?NU`v|;QYj&lYzawB(!#={nZw|
z7YqeE*5`5le6e9W*RJ62Kwh}!y{}TTU&9pRs&p70B-|GjyubA7{1hjC#SSY5ACccb
zjpXV)1n)1Ky7*r2+)L4{wLe^+%ZV|}c=Nqv&#ExXmGZex@^v?j>`qraEM#oBc=_k-
ziXVooHNw}AZ&`O~iQTU$zgJzH_bIdKd10~t<B#v{J_Rry=v9<wdv*U&Rd7qq+-s@7
zYHs`Pn08O=MQxRtVNSvhu@Am?-pt?l^1V$CLxJwI^^YI+Upei|^`m{qKi}+FpO=gC
zd$Mg8=3jDaoB!MU&X)}fyAu~1z7v;oV@Q+w7_Rxi{^-}*t}m&ApT8IG^*&zuDs$ci
z_e{%$?=NlcOe{XUvSotV|KjcTqW^W|&R=?e=Kl9K6NWRc@hvv<uf{E3S;O)3_Lstc
z|CUT&w^k~@WVTs^-@D4o&oy88@A~`tn)7qsOokc#u@_I(-2LNhxbS)Z=dYhVzc1Q4
z=fdfR>5cof{4}RH#?QFGIOAr^zST{2H)Hop<`thPsgoD3lKlG1q^7UZ?r9u*>>b96
z9>Mj^^KS3ZJT%YQ?&Y~}zqzVpzy6weB6Zf8(=TI=FwO|R^Lj=8?$_`6uFDI3{>@Rf
z^I?Fit;pm`%Zc4q48=3AoIbc+rjDQQXD!>`WoN&;?wOm$o^UR3{cVev^`X|T7he0e
zWo=I4J1}Q)-SZB4;}`Bf-5CztG3DH~J(s=V@~2~Z3<@t88Wu1!H1RQTSb-3N4-ta!
n5lVo3gc9<!oVixd#KRy`9n$khq;n^*iN@gR>gTe~DWM4fsSE!b

diff --git a/plugins/style_bases/region/region_rounded_shadow/icon.png b/plugins/style_bases/region/region_rounded_shadow/icon.png
deleted file mode 100644
index c3a45729c0b817e77aa1cb9e843b99b98cfa0da3..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3566
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

diff --git a/plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.css b/plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.css
deleted file mode 100644
index 07b092e..0000000
--- a/plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.css
+++ /dev/null
@@ -1,101 +0,0 @@
-/* Show only to IE7 */
-*:first-child+html .rounded-shadow-background,
-/* Show only to IE6 */
-* html .rounded-shadow-background {
-  margin: 0 -10px 0 0 !important;
-  padding: 10px 0 5px 0 !important;
-}
-
-.rounded-shadow-top-edge,
-.rounded-shadow-bottom-edge,
-.rounded-shadow-left-edge,
-.rounded-shadow-right-edge,
-.rounded-shadow-wrap-corner {
-  position: relative;
-  /* hasLayout -1 ? For IE only */
-  zoom: 1;
-}
-%style {
-  padding-top: 10px;
-  margin-bottom: 30px;
-  color: %text;
-}
-
-%style .rounded-shadow-background {
-  margin: 10px;
-  background: %background url(rounded-shadow-background.png) repeat;
-}
-
-%style .rounded-shadow-wrap-corner {
-  margin: -10px;
-}
-
-%style .rounded-shadow-top-edge {
-  top: -10px;
-  background: url(rounded-shadow-top-edge.png) repeat-x 0 top;
-  font-size: 1px;
-}
-
-%style .rounded-shadow-bottom-edge {
-  bottom: -10px;
-  background: url(rounded-shadow-bottom-edge.png) repeat-x 0 bottom;
-  font-size: 1px;
-}
-
-%style .rounded-shadow-left-edge {
-  background: url(rounded-shadow-left-edge.png) repeat-y 0 0;
-}
-
-%style .rounded-shadow-right-edge {
-  background: url(rounded-shadow-right-edge.png) repeat-y right 0;
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-top-edge,
-%style .rounded-shadow-wrap-corner .rounded-shadow-bottom-edge {
-  height: 19px;
-  margin: -10px 19px;
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-left,
-%style .rounded-shadow-wrap-corner .rounded-shadow-right {
-  position: absolute;
-  top: 0;
-  height: 19px;
-  width: 19px;
-  margin: 0 -19px;
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-left {
-  background-image: url(rounded-shadow-top-left-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-right {
-  right: 0;
-  background-image: url(rounded-shadow-top-right-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-bottom-edge .rounded-shadow-left {
-  background-image: url(rounded-shadow-bottom-left-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-bottom-edge .rounded-shadow-right {
-  right: 0;
-  background-image: url(rounded-shadow-bottom-right-corner.png);
-}
-
-%style .rounded-shadow-wrap-corner .rounded-shadow-right-edge {
-  padding: 3px 19px;
-}
-
-/*
-%style div.admin-links {
-  margin-top: -19px;
-  margin-left: -12px;
-}
-
-%style .panel-separator {
-  background: url(rounded-shadow-bottom-edge.png) repeat-x 0 center;
-  font-size: 1px;
-  height: 30px;
-}
-*/
diff --git a/plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.tpl.php b/plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.tpl.php
deleted file mode 100644
index 840f50a..0000000
--- a/plugins/style_bases/region/region_rounded_shadow/region-rounded-shadow.tpl.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-/**
- * @file
- *
- * Display the box for rounded corners.
- *
- * - $content: The content of the box.
- * - $classes: The classes that must be applied to the top divs.
- */
-?>
-<div class="rounded-shadow <?php print $class ?>">
-  <div class="rounded-shadow-background">
-    <div class="rounded-shadow-wrap-corner">
-      <div class="rounded-shadow-top-edge">
-        <div class="rounded-shadow-left"></div>
-        <div class="rounded-shadow-right"></div>
-      </div>
-      <div class="rounded-shadow-left-edge">
-        <div class="rounded-shadow-right-edge clearfix">
-          <?php print $content; ?>
-        </div>
-      </div>
-      <div class="rounded-shadow-bottom-edge">
-      <div class="rounded-shadow-left"></div><div class="rounded-shadow-right"></div>
-      </div>
-    </div>
-  </div>
-</div>
diff --git a/plugins/style_bases/region/region_rounded_shadow/region_rounded_shadow.inc b/plugins/style_bases/region/region_rounded_shadow/region_rounded_shadow.inc
deleted file mode 100644
index b73da90..0000000
--- a/plugins/style_bases/region/region_rounded_shadow/region_rounded_shadow.inc
+++ /dev/null
@@ -1,71 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the style base for the rounded shadow box.
- *
- * This box is colorable, has rounded corners and a drop shadow.
- */
-
-$plugin = array(
-  'category' => t('Basic styles'),
-  'title' => t('Rounded shadow box'),
-  'module' => 'panels',
-  'type' => 'region',
-  'css' => 'region-rounded-shadow.css',
-  'icon' => 'icon.png',
-  'defaults' => array('font' => array(), 'padding' => array()),
-  'palette' => array(
-    'background' => array(
-      'label' => t('Background'),
-      'default_value' => '#FFFFFF',
-    ),
-    'text' => array(
-      'label' => t('Text color'),
-      'default_value' => '#000000',
-    ),
-  ),
-  'actions' => array(
-    array('load', 'box', 'box-color.png'),
-    array('colorize', 'background'),
-    array('load', 'shadow', 'box-shadow.png'),
-    array('merge_from', 'box'),
-    array('slice', 'rounded-shadow-top-left-corner.png', 17, 49, 19, 19),
-    array('slice', 'rounded-shadow-top-right-corner.png', 473, 49, 19, 19),
-    array('slice', 'rounded-shadow-bottom-left-corner.png', 17, 442, 19, 19),
-    array('slice', 'rounded-shadow-bottom-right-corner.png', 473, 442, 19, 19),
-    array('slice', 'rounded-shadow-left-edge.png', 17, 60, 10, 10),
-    array('slice', 'rounded-shadow-right-edge.png', 474, 60, 18, 10),
-    array('slice', 'rounded-shadow-top-edge.png', 28, 49, 10, 10),
-    array('slice', 'rounded-shadow-bottom-edge.png', 28, 443, 10, 18),
-    array('slice', 'rounded-shadow-background.png', 150, 150, 1, 1),
-  ),
-
-  'theme' => 'region_rounded_shadow',
-
-  'build' => 'panels_rounded_shadow_style_base_build',
-//  'preview' => 'panels_stylizer_region_preview',
-
-  'settings form' => 'panels_region_rounded_shadow_style_settings',
-  'settings form submit' => 'panels_region_rounded_shadow_style_settings_submit',
-  'build' => 'panels_region_rounded_shadow_style_base_build',
-);
-
-function panels_region_rounded_shadow_style_settings(&$form, &$form_state) {
-  $form['font'] = array();
-  ctools_stylizer_font_selector_form($form['font'], $form_state, t('Font'), $form_state['settings']['font']);
-
-  $form['padding'] = array();
-  ctools_stylizer_padding_selector_form($form['padding'], $form_state, t('Padding'), $form_state['settings']['padding']);
-}
-
-function panels_region_rounded_shadow_style_settings_submit(&$form, &$form_state) {
-  ctools_stylizer_font_selector_form_submit($form['font'], $form_state, $form_state['values']['font'], $form_state['settings']['font']);
-  ctools_stylizer_padding_selector_form_submit($form['padding'], $form_state, $form_state['values']['padding'], $form_state['settings']['padding']);
-}
-
-function panels_region_rounded_shadow_style_base_build($plugin, $settings, &$css, $replacements) {
-  ctools_stylizer_font_apply_style($css, '%style', $settings['font']);
-  ctools_stylizer_padding_apply_style($css, '%style', $settings['padding']);
-}
-
diff --git a/plugins/styles/block.inc b/plugins/styles/block.inc
deleted file mode 100644
index e1ec432..0000000
--- a/plugins/styles/block.inc
+++ /dev/null
@@ -1,58 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the 'block' panel style.
- */
-
-// Plugin definition.
-$plugin = array(
-  'title' => t('System block'),
-  'description' => t('Display the pane as a system block; this is more restrictive than the default.'),
-  'render pane' => 'panels_block_style_render_pane',
-  'weight' => -10,
-);
-
-/**
- * Render callback.
- *
- * @ingroup themeable
- */
-function theme_panels_block_style_render_pane($vars) {
-  $content = $vars['content'];
-  $pane = $vars['pane'];
-
-  if (empty($content->content)) {
-    return;
-  }
-
-  $block = clone($content);
-
-  if (!empty($block->title)) {
-    $block->subject = $block->title;
-  }
-  if (!isset($block->subject)) {
-    $block->subject = '';
-  }
-
-  $block->region = $pane->panel;
-  if (!isset($block->module)) {
-    $block->module = $block->type;
-  }
-  if (!isset($block->delta)) {
-    $block->delta = $block->subtype;
-  }
-
-  $build = $block->content;
-  if (is_string($build)) {
-    $build = array('#markup' => $build);
-  }
-
-  $build['#block'] = $block;
-  $build['#theme_wrappers'][] = 'block';
-
-  // If using per pane classes, $block->css_class will need to be added in your
-  // preprocess or template, along with any other Panels specific field you
-  // might want to utilize.
-  return drupal_render($build);
-}
diff --git a/plugins/styles/corners/corner-bits.png b/plugins/styles/corners/corner-bits.png
deleted file mode 100644
index 73480e64795a9737c30ffd6dc17c57b9e8a59dad..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 514
zcmV+d0{#7oP)<h;3K|Lk000e1NJLTq000&M000&U0ssI2OV;~r00004XF*Lt007q5
z)K6G40000PbVXQnQ*UN;cVTj606}DLVr3vnZDD6+Qe|Oed2z{QJOBUzlu1NERCwB)
zluLJlFc5_yfW@QeVId0+|Np145I3S6EmY{2j7F+b)817cbMH*%5q}s4?<a;E`o5Q2
z-}jYL{tXZI;RCrh_%gU$F046+9|S>YpbW-B;g}Dn>$<jWKMh!O!WH}|iarcxvl(kn
ztjbjaZ&*V<olZ^DKu(e*P1D6<!EIwu*EM8L=JPp1s1S~RraT)yZpAK+<2=vhdJNo@
zWqCfISF065L?p3<a)(>|9}b7jX0u+ey;nfAD2n}lzuWC>Ms$wGAuN~6DZT{;1cEWC
zmA5D>K?$-f^BjPgWE~=OEdiN5Aw1XoB`_n|;#Eu7T972q8AwRUp(|-8HWb2Lf}#pv
zN8$Yo<0mWWe{##)+$Au!bydQr?Pw}@2|CC&sFtC^v>K<+Q~MH_9gjyOAnGWj!;oNK
zRh5gxcDog?(%^Rq+MYn@-{1Kd5W?e(@Emf%{81zVLFnz6VGQLysZ+yFzuIBPGt!g8
zKK13Wu)h|ZH(!o)%k^zxh#ju}{P9^8A)w;;{eBBD03;@96s}c2xBvhE07*qoM6N<$
Ef&!P_`v3p{

diff --git a/plugins/styles/corners/panels-rounded-corners-box.tpl.php b/plugins/styles/corners/panels-rounded-corners-box.tpl.php
deleted file mode 100644
index ea59276..0000000
--- a/plugins/styles/corners/panels-rounded-corners-box.tpl.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-/**
- * @file
- *
- * Display the box for rounded corners.
- *
- * - $content: The content of the box.
- */
-?>
-<div class="rounded-corner">
-  <div class="wrap-corner">
-    <div class="t-edge"><div class="l"></div><div class="r"></div></div>
-    <div class="l-edge">
-      <div class="r-edge clearfix">
-        <?php print $content; ?>
-      </div>
-    </div>
-    <div class="b-edge"><div class="l"></div><div class="r"></div></div>
-  </div>
-</div>
diff --git a/plugins/styles/corners/rounded_corners.inc b/plugins/styles/corners/rounded_corners.inc
deleted file mode 100644
index bf952f9..0000000
--- a/plugins/styles/corners/rounded_corners.inc
+++ /dev/null
@@ -1,205 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the 'rounded_corners' panel style.
- */
-
-// Plugin definition.
-$plugin = array(
-  'title' => t('Rounded corners'),
-  'description' => t('Presents the panes or panels with a rounded corner box around them'),
-  'render region' => 'panels_rounded_corners_style_render_region',
-  'render pane' => 'panels_rounded_corners_style_render_pane',
-  'settings form' => 'panels_rounded_corners_style_settings_form',
-  'hook theme' => array(
-    'panels_rounded_corners_box' => array(
-      'variables' => array('content' => NULL),
-      'path' => panels_get_path('plugins/styles/corners'),
-      'template' => 'panels-rounded-corners-box',
-    ),
-  ),
-);
-
-/**
- * Render callback.
- *
- * @ingroup themeable
- */
-function theme_panels_rounded_corners_style_render_region($vars) {
-  $display = $vars['display'];
-  $region_id = $vars['region_id'];
-  $panes = $vars['panes'];
-  $settings = $vars['settings'];
-
-  $output = '';
-
-  // Determine where to put the box. If empty or 'pane' around each pane. If
-  // 'panel' then just around the whole panel.
-  $where = empty($settings['corner_location']) ? 'pane' : $settings['corner_location'];
-
-  $print_separator = FALSE;
-  foreach ($panes as $pane_id => $pane) {
-    // Add the separator if we've already displayed a pane.
-    if ($print_separator) {
-      $output .= '<div class="panel-separator">&nbsp;</div>';
-    }
-
-    if ($where == 'pane') {
-      $output .= theme('panels_rounded_corners_box', array('content' => $pane));
-    }
-    else {
-      $output .= $pane;
-      $print_separator = TRUE;
-    }
-  }
-
-  if ($where == 'panel') {
-    $output = theme('panels_rounded_corners_box', array('content' => $output));
-  }
-
-  panels_add_rounded_corners_css($display, $where);
-
-  return $output;
-}
-
-function panels_add_rounded_corners_css($display, $where) {
-  static $displays_used = array();
-  if (empty($displays_used[$display->css_id])) {
-    panels_rounded_corners_css($display, $where);
-    $displays_used[$display->css_id] = TRUE;
-  }
-}
-
-/**
- * Render callback for a single pane.
- */
-function theme_panels_rounded_corners_style_render_pane($vars) {
-  $content = $vars['content'];
-  $pane = $vars['pane'];
-  $display = $vars['display'];
-
-  if (empty($content->content)) {
-    return;
-  }
-
-  $output = theme('panels_pane', array('content' => $content, 'pane' => $pane, 'display' => $display));
-
-  // Just stick a box around the standard theme_panels_pane.
-  $output = theme('panels_rounded_corners_box', array('content' => $output));
-  panels_add_rounded_corners_css($display, 'pane');
-  return $output;
-}
-
-/**
- * Settings form callback.
- */
-function panels_rounded_corners_style_settings_form($style_settings) {
-  $form['corner_location'] = array(
-    '#type' => 'select',
-    '#title' => t('Box around'),
-    '#options' => array(
-      'pane' => t('Each pane'),
-      'panel' => t('Each region'),
-    ),
-    '#default_value' => (isset($style_settings['corner_location'])) ? $style_settings['corner_location'] : 'ul',
-    '#description' => t('Choose whether to include the box around each pane (piece of content) or region (each column or region)'),
-  );
-
-  return $form;
-}
-
-/**
- * Generates the dynamic CSS.
- *
- * @param $display
- *   A Panels display object.
- */
-function panels_rounded_corners_css($display) {
-  $idstr = empty($display->css_id) ? '.rounded-corner' : "#$display->css_id";
-  $css_id = 'rounded-corner:' . $idstr;
-
-  ctools_include('css');
-  $filename = ctools_css_retrieve($css_id);
-  if (!$filename) {
-    $filename = ctools_css_store($css_id, _panels_rounded_corners_css($idstr), FALSE);
-  }
-
-  drupal_add_css($filename, array('preprocess' => TRUE));
-}
-
-/**
- * Generates the dynamic CSS.
- */
-function _panels_rounded_corners_css($idstr) {
-  $url = panels_get_path('plugins/styles/corners', TRUE);
-
-  $css = <<<EOF
-
-.t-edge, .b-edge, .l-edge, .r-edge, .wrap-corner {
-  position: relative;
-  /* hasLayout -1 ? For IE only */
-  zoom: 1;
-}
-$idstr .t-edge {
-  background: url($url/shadow-t.png) repeat-x 0 top;
-  font-size: 1px;
-}
-$idstr .b-edge {
-  background: url($url/shadow-b.png) repeat-x 0 bottom;
-  font-size: 1px;
-}
-$idstr .l-edge {
-  background: url($url/shadow-l.png) repeat-y 0 0;
-}
-$idstr .r-edge {
-  background: url($url/shadow-r.png) repeat-y right 0;
-}
-$idstr .wrap-corner {
-  background: #fff !important;
-}
-$idstr .wrap-corner .t-edge, $idstr .wrap-corner .b-edge {
-  height: 11px;
-}
-$idstr .wrap-corner .l, $idstr .wrap-corner .r {
-  position: absolute;
-  top: 0;
-  height: 11px;
-  width: 11px;
-  background-image: url($url/corner-bits.png);
-}
-$idstr .wrap-corner .l {
-  left: 0;
-}
-$idstr .wrap-corner .r {
-  right: 0;
-  background-position: -11px 0;
-}
-$idstr .wrap-corner .b-edge .l {
-  background-position: 0 -11px;
-}
-$idstr .wrap-corner .b-edge .r {
-  background-position: -11px -11px;
-}
-$idstr .wrap-corner .r-edge {
-  padding: 5px 24px;
-}
-$idstr div.admin-links {
-  margin-top: -14px;
-  margin-left: -12px;
-}
-
-$idstr .panel-separator {
-  background: url($url/shadow-b.png) repeat-x 0 center;
-  font-size: 1px;
-  height: 30px;
-}
-
-$idstr .rounded-corner {
-  margin-bottom: 1em;
-}
-
-EOF;
-
-  return $css;
-}
diff --git a/plugins/styles/corners/shadow-b.png b/plugins/styles/corners/shadow-b.png
deleted file mode 100644
index 663676edfe683907dc28a6204d9c253fc28aa98d..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 140
zcmeAS@N?(olHy`uVBq!ia0vp^AT~1x6OdGm=TrhxEa{HEjtmUfZd~z?Faq)=OI#yL
zg7ec#$`gxH85~pclTsBta}(23gHjVyDhp4h+5i>FdAc};RNPA1Q}$MhIq!gyl2ViV
jtdGb0<tvsjGVw5Y<gu;|xy%*=RLS7!>gTe~DWM4f_)jKl

diff --git a/plugins/styles/corners/shadow-l.png b/plugins/styles/corners/shadow-l.png
deleted file mode 100644
index 43fd7e71eff8410cb152ab5176c95b4b4a530f22..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 137
zcmeAS@N?(olHy`uVBq!ia0vp^%s|Y=!2~4#xfUw`DVB6cUq=RpYd5a=M;HP5k|nMY
zCBgY=CFO}lsSJ)O`AMk?p1FzXsX?iUDV2pMQ*D5Xq&;06Ln>}1{rvd&_;UaG_x4mC
hKEl9!C5@3qf<e!pW2S#j>~Wwn22WQ%mvv4FO#oLwDD(gT

diff --git a/plugins/styles/corners/shadow-r.png b/plugins/styles/corners/shadow-r.png
deleted file mode 100644
index 5c972f235c9cbc78ce386fc6220ac076d455562a..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 137
zcmeAS@N?(olHy`uVBq!ia0vp^%s|Y=!2~4#xfUw`DVB6cUq=RpYd5a=M;HP5k|nMY
zCBgY=CFO}lsSJ)O`AMk?p1FzXsX?iUDV2pMQ*D5Xq&;06Ln>}1?J9eFYjybgx<5Y-
h9${d<lE%m)!NAqbVJo7U?F&@K;OXk;vd$@?2>?4-Cz=2N

diff --git a/plugins/styles/corners/shadow-t.png b/plugins/styles/corners/shadow-t.png
deleted file mode 100644
index 5947889405af1643fbea8d068d3e8c50d5271562..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 139
zcmeAS@N?(olHy`uVBq!ia0vp^AT~1x6OdGm=TrhxEa{HEjtmUfZd~z?Faq)=OI#yL
zg7ec#$`gxH85~pclTsBta}(23gHjVyDhp4h+5i>Fdb&7<RNPAX^YJk|bKZeZFE6Xt
hT*|+<=b$pLKmr4+0!NRkLmtQ~22WQ%mvv4FO#mdFC*S}8

diff --git a/plugins/styles/default.inc b/plugins/styles/default.inc
deleted file mode 100644
index 2b95859..0000000
--- a/plugins/styles/default.inc
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the 'default' panel style.
- */
-
-// Plugin definition.
-$plugin = array(
-  'title' => t('No style'),
-  'description' => t('The default panel rendering style; displays each pane with a separator.'),
-  'render region' => 'panels_default_style_render_region',
-);
-
-/**
- * Render callback.
- *
- * @ingroup themeable
- */
-function theme_panels_default_style_render_region($vars) {
-  $output = '';
-//  $output .= '<div class="region region-' . $vars['region_id'] . '">';
-  $output .= implode('<div class="panel-separator"></div>', $vars['panes']);
-//  $output .= '</div>';
-  return $output;
-}
diff --git a/plugins/styles/list.inc b/plugins/styles/list.inc
deleted file mode 100644
index d97b5a9..0000000
--- a/plugins/styles/list.inc
+++ /dev/null
@@ -1,57 +0,0 @@
-<?php
-
-
-/**
- * @file
- * Definition of the 'list' panel style.
- */
-
-// Plugin definition.
-$plugin = array(
-  'title' => t('List'),
-  'description' => t('Presents the panes in the form of an HTML list.'),
-  'render region' => 'panels_list_style_render_region',
-  'settings form' => 'panels_list_style_settings_form',
-  'settings validate' => 'panels_list_style_settings_validate',
-);
-
-/**
- * Render callback.
- *
- * @ingroup themeable
- */
-function theme_panels_list_style_render_region($vars) {
-  $display = $vars['display'];
-  $region_id = $vars['region_id'];
-  $panes = $vars['panes'];
-  $settings = $vars['settings'];
-
-  $items = array();
-
-  foreach ($panes as $pane_id => $item) {
-    $items[] = $item;
-  }
-
-  if (empty($settings['list_type'])) {
-    $settings['list_type'] = 'ul';
-  }
-
-  return theme('item_list', array('items' => $items, 'type' => $settings['list_type']));
-}
-
-/**
- * Settings form callback.
- */
-function panels_list_style_settings_form($style_settings) {
-  $form['list_type'] = array(
-    '#type' => 'select',
-    '#title' => t('List type'),
-    '#options' => array(
-      'ul' => t('Unordered'),
-      'ol' => t('Ordered'),
-    ),
-    '#default_value' => (isset($style_settings['list_type'])) ? $style_settings['list_type'] : 'ul',
-  );
-
-  return $form;
-}
diff --git a/plugins/styles/naked.inc b/plugins/styles/naked.inc
deleted file mode 100644
index 1957177..0000000
--- a/plugins/styles/naked.inc
+++ /dev/null
@@ -1,33 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the 'naked' panel style.
- */
-
-// Plugin definition.
-$plugin = array(
-  'title' => t('No markup at all'),
-  'description' => t('Display the pane or region with no markup, not even a title.'),
-  'render region' => 'panels_naked_style_render_region',
-  'render pane' => 'panels_naked_style_render_pane',
-  'weight' => -5,
-);
-
-/**
- * Render callback.
- *
- * @ingroup themeable
- */
-function theme_panels_naked_style_render_region($vars) {
-  return implode($vars['panes']);
-}
-
-/**
- * Render callback.
- *
- * @ingroup themeable
- */
-function theme_panels_naked_style_render_pane($vars) {
-  return render($vars['content']->content);
-}
diff --git a/plugins/styles/stylizer.inc b/plugins/styles/stylizer.inc
deleted file mode 100644
index edc9684..0000000
--- a/plugins/styles/stylizer.inc
+++ /dev/null
@@ -1,375 +0,0 @@
-<?php
-
-/**
- * @file
- * Definition of the 'stylizer' panel style.
- */
-
-if (module_exists('stylizer')) {
-  // Plugin definition.
-  $plugin = array(
-    'title' => t('Custom style'),
-    'weight' => -10,
-    'description' => t('Allows choice of a stylizer style'),
-
-    'render pane' => 'panels_stylizer_stylizer_style_render_pane',
-    'pane settings form' => 'panels_stylizer_stylizer_style_settings_form',
-
-    'render region' => 'panels_stylizer_stylizer_style_render_region',
-    'settings form' => 'panels_stylizer_stylizer_style_settings_form',
-
-    // We offer substyles so provide callbacks to do so.
-    'get child' => 'panels_stylizer_get_substyle',
-    'get children' => 'panels_stylizer_get_substyles',
-
-    // Set up an AJAX callback for the style.
-    'ajax' => array(
-      'custom' => 'panels_stylizer_pane_add_style',
-    ),
-  //  'settings validate' => 'panels_stylizer_stylizer_style_settings_validate',
-  );
-}
-
-/**
- * Merge the main stylizer plugin with a style to create a sub plugin.
- *
- * This is used for both panels_stylizer_get_substyle and
- * panels_stylizer_get_substyles.
- */
-function panels_stylizer_merge_plugin($plugin, $style) {
-  $plugin['name'] = 'stylizer:' . $style->name;
-  $plugin['title'] = check_plain($style->admin_title);
-  $plugin['description'] = check_plain($style->admin_description);
-  $plugin['style'] = $style;
-  $plugin['weight'] = 0;
-
-  ctools_include('stylizer');
-  $base = ctools_get_style_base($style->settings['style_base']);
-  if ($base['type'] == 'pane') {
-    unset($plugin['render region']);
-  }
-  else {
-    unset($plugin['render pane']);
-  }
-
-  unset($plugin['settings form']);
-  unset($plugin['pane settings form']);
-  return $plugin;
-}
-
-/**
- * Callback to provide a single stored stylizer style.
- */
-function panels_stylizer_get_substyle($plugin, $style_name, $substyle_name) {
-  // Do not worry about caching; Panels is handling that for us.
-  ctools_include('export');
-  $item = ctools_export_crud_load('stylizer', $substyle_name);
-  if ($item) {
-    return panels_stylizer_merge_plugin($plugin, $item);
-  }
-}
-
-/**
- * Callback to provide all stored stylizer styles.
- */
-function panels_stylizer_get_substyles($plugin, $style_name) {
-  $styles[$style_name] = $plugin;
-  ctools_include('export');
-  ctools_include('stylizer');
-  $items = ctools_export_crud_load_all('stylizer');
-  foreach ($items as $name => $item) {
-    $base = ctools_get_style_base($item->settings['style_base']);
-    if ($base && $base['module'] == 'panels') {
-      $styles['stylizer:' . $name] = panels_stylizer_merge_plugin($plugin, $item);
-    }
-  }
-
-  return $styles;
-}
-
-/**
- * Get style settings for a stylizer style.
- *
- * Because style settings can come from a couple of different places,
- * depending on if it's a custom style in the panel or a custom style
- * in the database, we have a tricky way of looking for this info.
- */
-function _panels_stylizer_get_style($plugin, $style_settings) {
-  if (!empty($plugin['style'])) {
-    return $plugin['style']->settings;
-  }
-
-  if (empty($style_settings)) {
-    return array();
-  }
-
-  if ($style_settings['style'] == '$') {
-    return $style_settings['settings'];
-  }
-
-  ctools_include('export');
-  $style = ctools_export_crud_load('stylizer', $style_settings['style']);
-  if ($style) {
-    return $style->settings;
-  }
-}
-
-/**
- * Region render theme.
- */
-function theme_panels_stylizer_stylizer_style_render_region($vars) {
-  $display = $vars['display'];
-  $panes = $vars['panes'];
-  $style_settings = $vars['settings'];
-  $region_id = $vars['region_id'];
-  $plugin = $vars['style'];
-
-  $output = '';
-
-  foreach ($panes as $pane_id => $pane_output) {
-    $output .= $pane_output;
-  }
-
-  $settings = _panels_stylizer_get_style($plugin, $style_settings);
-
-  if (!empty($settings)) {
-    ctools_include('stylizer');
-    $plugin = ctools_get_style_base($settings['style_base']);
-    ctools_stylizer_add_css($plugin, $settings);
-
-    return theme($plugin['theme'], array('settings' => $settings, 'class' => ctools_stylizer_get_css_class($plugin, $settings), 'content' => $output));
-  }
-  else {
-    // If the style is gone, just display the output.
-    return $output;
-  }
-}
-
-/**
- * Pane render theme.
- */
-function theme_panels_stylizer_stylizer_style_render_pane($vars) {
-  $content = $vars['content'];
-  $pane = $vars['pane'];
-  $display = $vars['display'];
-  $plugin = $vars['style'];
-
-  $settings = _panels_stylizer_get_style($plugin, $vars['settings']);
-
-  if ($settings) {
-    ctools_include('stylizer');
-    $plugin = ctools_get_style_base($settings['style_base']);
-
-    if (empty($content->css_class)) {
-      $content->css_class = ctools_stylizer_get_css_class($plugin, $settings);
-    }
-    else {
-      $content->css_class .= ' ' . ctools_stylizer_get_css_class($plugin, $settings);
-    }
-
-    ctools_stylizer_add_css($plugin, $settings);
-
-    if (isset($plugin['theme'])) {
-      return theme($plugin['theme'], array('settings' => $settings, 'content' => $content, 'pane' => $pane, 'display' => $display));
-    }
-  }
-
-  // If the style is gone or has no theme of its own, just display the output.
-  return theme('panels_pane', array('content' => $content, 'pane' => $pane, 'display' => $display));
-}
-
-/**
- * Settings form callback.
- */
-function panels_stylizer_stylizer_style_settings_form($style_settings, $display, $pid, $type, $form_state) {
-  // Just redirect this to the custom style settings ajax.
-  panels_stylizer_pane_add_style($form_state['renderer'], array(), $style_settings, $type, $pid);
-  print ajax_render($form_state['renderer']->commands);
-  ajax_footer();
-  exit;
-}
-
-
-/**
- * Allow on-the-fly creation of styles in panes.
- */
-function panels_stylizer_pane_add_style(&$renderer, $plugin, &$conf, $type, $pid, $step = NULL) {
-  if (!user_access('administer panels styles')) {
-    return;
-  }
-
-  // Reset the $_POST['ajax_html_ids'] values to preserve
-  // proper IDs on form elements when auto-submit is used.
-  $_POST['ajax_html_ids'] = array();
-
-  ctools_include('stylizer');
-  $js = FALSE;
-
-  $path = $renderer->get_url('style', 'custom', $type, $pid, '%step');
-
-  $info = array(
-    'module' => 'panels',
-    'type' => $type,
-    'path' => $path,
-    'modal' => t('Create custom style'),
-    'owner form' => 'panels_stylizer_edit_pane_style_form',
-    'owner form validate' => 'panels_stylizer_edit_pane_style_form_validate',
-    'owner form submit' => 'panels_stylizer_edit_pane_style_form_submit',
-    'owner settings' => array('preconfigured' => FALSE, 'name' => '', 'admin_title' => '', 'admin_description' => ''),
-    'cache' => &$renderer->cache,
-    'conf' => &$conf,
-    'pid' => $pid,
-  );
-
-  if (!empty($conf['settings'])) {
-    $info['settings'] = $conf['settings'];
-  }
-
-  $output = ctools_stylizer_edit_style($info, TRUE, $step);
-  if (!empty($info['complete'])) {
-    if (!empty($info['owner settings']['preconfigured'])) {
-      ctools_include('export');
-      $style = ctools_export_crud_new('stylizer');
-      $style->name = $info['settings']['name'];
-      $style->admin_title = $info['owner settings']['admin_title'];
-      $style->admin_description = $info['owner settings']['admin_description'];
-      $style->settings = $info['settings'];
-      ctools_export_crud_save('stylizer', $style);
-      $conf['style'] = $info['settings']['name'];
-      if (isset($conf['settings'])) {
-        unset($conf['settings']);
-      }
-    }
-    else {
-      $conf['style'] = '$';
-      $conf['settings'] = $info['settings'];
-    }
-
-    // Be sure to unset the temporary if the style was just changed.
-    if (isset($renderer->cache->style)) {
-      unset($renderer->cache->style);
-    }
-    // $conf was a reference so it should just modify.
-    panels_edit_cache_set($renderer->cache);
-
-    $renderer->commands[] = ctools_modal_command_dismiss();
-
-    if ($type == 'pane') {
-      $renderer->command_update_pane($pid);
-    }
-    elseif ($type == 'region') {
-      $renderer->command_update_region_links($pid);
-    }
-    else {
-      $renderer->command_update_display_links();
-    }
-  }
-  else {
-    $renderer->commands = $output;
-  }
-}
-
-
-/**
- * The form for determining if a pane should create a local style or a
- * preconfigured style.
- */
-function panels_stylizer_edit_pane_style_form(&$form, &$form_state) {
-  if (!user_access('administer panels styles') || !module_exists('stylizer')) {
-    return;
-  }
-  ctools_include('dependent');
-
-  $settings = $form_state['owner info']['owner settings'];
-  $form['panels']['admin_title'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Administrative title'),
-    '#description' => t('The name of this style. This will appear in the administrative interface to easily identify it.'),
-    '#default_value' => $settings['admin_title'],
-    '#process' => array('ctools_dependent_process'),
-    '#dependency' => array('edit-preconfigured' => array(1)),
-  );
-
-  $form['panels']['name'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Machine name'),
-    '#description' => t('The machine readable name of this page. It must be unique, and it must contain only alphanumeric characters and underscores. Once created, you will not be able to change this value!'),
-    '#default_value' => $settings['name'],
-    '#process' => array('ctools_dependent_process'),
-    '#dependency' => array('edit-preconfigured' => array(1)),
-  );
-
-  $form['panels']['admin_description'] = array(
-    '#type' => 'textarea',
-    '#title' => t('Administrative description'),
-    '#description' => t('A description of what this style is, does or is for, for administrative use.'),
-    '#default_value' => $settings['admin_description'],
-    '#process' => array('ctools_dependent_process'),
-    '#dependency' => array('edit-preconfigured' => array(1)),
-  );
-
-  // Add the checkbox, set the weight early.
-  $form['panels']['preconfigured'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Make this style available to other regions or panes'),
-    '#default_value' => $settings['name'],
-    '#weight' => -1,
-  );
-
-}
-
-/**
- * Validate to see if we need to check the preconfigured values.
- */
-function panels_stylizer_edit_pane_style_form_validate(&$form, &$form_state) {
-  if (!user_access('administer panels styles')) {
-    return;
-  }
-
-  // Only validate if preconfigured is checked.
-  if ($form_state['values']['preconfigured'] && !empty($form_state['clicked_button']['#wizard type'])) {
-    if (empty($form_state['values']['admin_title'])) {
-      form_error($form['panels']['admin_title'], t('You must choose an administrative title.'));
-    }
-
-    // If this is new, make sure the name is unique:
-    if ($form_state['op'] == 'add') {
-      if (empty($form_state['values']['name'])) {
-        form_error($form['panels']['name'], t('You must choose a machine name.'));
-      }
-
-      ctools_include('export');
-      $test = ctools_export_crud_load('stylizer', $form_state['values']['name']);
-      if ($test) {
-        form_error($form['panels']['name'], t('That name is used by another style: @page', array('@page' => $test->admin_title)));
-      }
-
-      // Ensure name fits the rules:
-      if (preg_match('/[^a-zA-Z0-9_]/', $form_state['values']['name'])) {
-        form_error($form['panels']['name'], t('Name must be alphanumeric or underscores only.'));
-      }
-    }
-  }
-}
-
-/**
- * Store the preconfigured values.
- */
-function panels_stylizer_edit_pane_style_form_submit(&$form, &$form_state) {
-  if (!user_access('administer panels styles')) {
-    return;
-  }
-
-  // Only validate if preconfigured is checked.
-  if ($form_state['values']['preconfigured'] && !empty($form_state['clicked_button']['#wizard type'])) {
-    $form_state['owner info']['owner settings']['admin_title'] = $form_state['values']['admin_title'];
-    $form_state['owner info']['owner settings']['admin_description'] = $form_state['values']['admin_description'];
-
-    // Clean up preview files before we set the name.
-    ctools_stylizer_cleanup_style($form_state['plugin'], $form_state['settings']);
-
-    $form_state['settings']['name'] = $form_state['values']['name'];
-    $form_state['name'] = $form_state['values']['name'];
-    $form_state['owner info']['owner settings']['preconfigured'] = $form_state['values']['preconfigured'];
-  }
-}
-- 
2.11.0 (Apple Git-81)

